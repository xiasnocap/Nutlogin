# -*- coding: utf-8 -*-
from linepy import *
from akad.ttypes import *
from multiprocessing import Pool, Process
from datetime import datetime
from time import sleep
from bs4 import BeautifulSoup
from humanfriendly import format_timespan, format_size, format_number, format_length
import time, random, sys, json, codecs, threading, glob, re, string, os, requests, subprocess, six, ast, pytz, urllib.request, urllib.parse, urllib.error, urllib.parse
from gtts import gTTS
import html5lib,shutil
import wikipedia,goslate
import youtube_dl, pafy, asyncio
from multiprocessing import Pool, Process
from googletrans import Translator

#==============================================================================#
botStart = time.time()
#==============================================================================#
line = LINE()
line.log("Auth Token : " + str(line.authToken))
line.log("Timeline Token : " + str(line.tl.channelAccessToken))

# ki = LINE()
# ki.log("Auth Token : " + str(ki.authToken))
# ki.log("Timeline Token : " + str(ki.tl.channelAccessToken))

# kk = LINE()
# kk.log("Auth Token : " + str(kk.authToken))
# kk.log("Timeline Token : " + str(kk.tl.channelAccessToken))

# kc = LINE()
# kc.log("Auth Token : " + str(kc.authToken))
# kc.log("Timeline Token : " + str(kc.tl.channelAccessToken))

# ke = LINE()
# ke.log("Auth Token : " + str(ke.authToken))
# ke.log("Timeline Token : " + str(ke.tl.channelAccessToken))


print ("Login Succes")

lineMID = line.profile.mid
lineProfile = line.getProfile()
lineSettings = line.getSettings()

# kiMID = ki.profile.mid
# kiProfile = ki.getProfile()
# kiSettings = ki.getSettings()

# kkMID = kk.profile.mid
# kkProfile = kk.getProfile()
# kkSettings = kk.getSettings()

# kcMID = kc.profile.mid
# kcProfile = kc.getProfile()
# kcSettings = kc.getSettings()

# keMID = kc.profile.mid
# keProfile = kc.getProfile()
# keSettings = kc.getSettings()


# oepoll = OEPoll(ke)
# oepoll = OEPoll(kc)
# oepoll = OEPoll(kk)
# oepoll = OEPoll(ki)
oepoll = OEPoll(line)
readOpen = codecs.open("read.json","r","utf-8")
settingsOpen = codecs.open("temp.json","r","utf-8")
read = json.load(readOpen)
settings = json.load(settingsOpen)
Rfu = [line]
lineMID = line.getProfile().mid
# kiMID = ki.getProfile().mid
# kkMID = kk.getProfile().mid
# kcMID = kc.getProfile().mid
# kcMID = ke.getProfile().mid
# bot1 = line.getProfile().mid
RfuBot=[lineMID]
Family=["u0dedae6e6ff204f52f2e4a096630ea82",lineMID]
admin=['u0dedae6e6ff204f52f2e4a096630ea82','u0dedae6e6ff204f52f2e4a096630ea82',lineMID]
RfuFamily = RfuBot + Family

protectname = []
protecturl = []
protection = []
autocancel = {}
autoinvite = []
autoleaveroom = []
targets = []
#==============================================================================#
settings = {
    "autoAdd": True,
    "autoJoin": False,
    'autoCancel':{"on":True,"members":5},	
    "autoLeave": False,
    "autoRead": False,
    "leaveRoom": False,
    "detectMention": True,
    "checkSticker": False,
    "kickMention": False,
    "potoMention": True,
    "lang":"JP",
    "Nn": True,
    "Sd": True,
    "blacklist":{},
    "winvite": False,
    "wblacklist": False,
    "dblacklist": False,
    "commentBlack":{},
    "wblack": False,
    "dblack": False,
    "clock": False,
    "cName":"",
    "cNames":"",
    "welcome":"‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ‡∏û‡πà‡∏≠‡πÅ‡∏°‡πà‡∏û‡∏µ‡πà‡∏ô‡πâ‡∏≠‡∏á üòÖ",
    "bye":"‡∏≠‡∏≠‡∏Å‡∏ó‡∏≥‡πÑ‡∏° ‡πÑ‡∏°‡πà‡∏ô‡πà‡∏≤‡πÄ‡∏£‡∏¢ üò≠",
    "invite": {},
    "winvite": False,
    "pnharfbot": {},
    "pname": {},
    "pro_name": {},
    "message":"‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÑ‡∏ä‡πâ‡∏ô‡∏µ‡πâ ‡∏ñ‡∏π‡∏Å‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÇ‡∏î‡∏¢ „Äê„Åï‡∏±‡¶èœÄ‡∏±‡Æû‚úµ‡∫ö‡∏¥‡§•‚Ñì‚Ñì“®‡§§Œ©„Äë ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏ö‡∏•‡πá‡∏≠‡∏Ñ‡∏Ñ‡∏∏‡∏ì ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ üò¢",
    "comment":"AUTOLIKE BY.„Äê„Åï‡∏±‡¶èœÄ‡∏±‡Æû‚úµ‡∫ö‡∏¥‡§•‚Ñì‚Ñì“®‡§§Œ©„Äë",
    "Respontag":"‡πÑ‡∏≠‡πà‡∏´‡∏±‡∏ß‡∏î‡∏≠ üòî",
    "userAgent": [
        "Mozilla/5.0 (X11; U; Linux i586; de; rv:5.0) Gecko/20100101 Firefox/5.0",
        "Mozilla/5.0 (X11; U; Linux amd64; rv:5.0) Gecko/20100101 Firefox/5.0 (Debian)",
        "Mozilla/5.0 (X11; U; Linux amd64; en-US; rv:5.0) Gecko/20110619 Firefox/5.0",
        "Mozilla/5.0 (X11; Linux) Gecko Firefox/5.0",
        "Mozilla/5.0 (X11; Linux x86_64; rv:5.0) Gecko/20100101 Firefox/5.0 FirePHP/0.5",
        "Mozilla/5.0 (X11; Linux x86_64; rv:5.0) Gecko/20100101 Firefox/5.0 Firefox/5.0",
        "Mozilla/5.0 (X11; Linux x86_64) Gecko Firefox/5.0",
        "Mozilla/5.0 (X11; Linux ppc; rv:5.0) Gecko/20100101 Firefox/5.0",
        "Mozilla/5.0 (X11; Linux AMD64) Gecko Firefox/5.0",
        "Mozilla/5.0 (X11; FreeBSD amd64; rv:5.0) Gecko/20100101 Firefox/5.0",
        "Mozilla/5.0 (Windows NT 6.2; WOW64; rv:5.0) Gecko/20100101 Firefox/5.0",
        "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:5.0) Gecko/20110619 Firefox/5.0",
        "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:5.0) Gecko/20100101 Firefox/5.0",
        "Mozilla/5.0 (Windows NT 6.1; rv:6.0) Gecko/20100101 Firefox/5.0",
        "Mozilla/5.0 (Windows NT 6.1.1; rv:5.0) Gecko/20100101 Firefox/5.0",
        "Mozilla/5.0 (Windows NT 5.2; WOW64; rv:5.0) Gecko/20100101 Firefox/5.0",
        "Mozilla/5.0 (Windows NT 5.1; U; rv:5.0) Gecko/20100101 Firefox/5.0",
        "Mozilla/5.0 (Windows NT 5.1; rv:2.0.1) Gecko/20100101 Firefox/5.0",
        "Mozilla/5.0 (Windows NT 5.0; WOW64; rv:5.0) Gecko/20100101 Firefox/5.0",
        "Mozilla/5.0 (Windows NT 5.0; rv:5.0) Gecko/20100101 Firefox/5.0"
    ],
    "mimic": {
        "copy": False,
        "status": False,
        "target": {}
    }
}

RfuProtect = {
    "protect": False,
    "cancelprotect": False,
    "inviteprotect": False,
    "linkprotect": False,
    "Protectguest": False,
    "Protectjoin": False,
    "autoAdd": False,
}

Setmain = {
    "foto": {},
}

read = {
    "readPoint": {},
    "readMember": {},
    "readTime": {},
    "ROM": {}
}

myProfile = {
	"displayName": "",
	"statusMessage": "",
	"pictureStatus": ""
}

mimic = {
    "copy":True,
    "copy2":True,
    "status":False,
    "target":{}
    }
    
RfuCctv={
    "cyduk":{},
    "point":{},
    "sidermem":{}
}

rfuSet = {
    'setTime':{},
    'ricoinvite':{},
    }

setTime = {}
setTime = rfuSet['setTime']

contact = line.getProfile() 
backup = line.getProfile() 
backup.dispalyName = contact.displayName 
backup.statusMessage = contact.statusMessage
backup.pictureStatus = contact.pictureStatus

mulai = time.time() 
#dangerMessage = ["cleanse","group cleansed.","mulai",".winebot",".kickall","mayhem","kick on","Kick","!kickall","nuke","‡∏ö‡∏¥‡∏ô","Kick","‡∏Å‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô","‡∏´‡∏ß‡∏î","‡πÄ‡∏ã‡∏•‡∏Å‡∏≤‡∏Å‡∏à‡∏±‡∏á","‡πÄ‡∏ï‡∏∞",".","‡∏õ‡∏•‡∏¥‡∏ß"]

myProfile["displayName"] = lineProfile.displayName
myProfile["statusMessage"] = lineProfile.statusMessage
myProfile["pictureStatus"] = lineProfile.pictureStatus
#==============================================================================#
def restartBot():
    print ("[ INFO ] BOT RESETTED")
    time.sleep(3)
    python = sys.executable
    os.execl(python, python, *sys.argv)
    
def logError(text):
    line.log("[ ERROR ] " + str(text))
    time_ = datetime.now()
    with open("errorLog.txt","a") as error:
        error.write("\n[%s] %s" % (str(time), text))
        
def sendMention(to, mid, firstmessage, lastmessage):
    try:
        arrData = ""
        text = "%s " %(str(firstmessage))
        arr = []
        mention = "@x "
        slen = str(len(text))
        elen = str(len(text) + len(mention) - 1)
        arrData = {'S':slen, 'E':elen, 'M':mid}
        arr.append(arrData)
        text += mention + str(lastmessage)
        line.sendMessage(to, text, {'MENTION': str('{"MENTIONEES":' + json.dumps(arr) + '}')}, 0)
    except Exception as error:
        logError(error)
        line.sendMessage(to, "[ INFO ] Error :\n" + str(error))



def sendMessageWithMention(to, mid):
    try:
        aa = '{"S":"0","E":"3","M":'+json.dumps(mid)+'}'
        text_ = '@x '
        line.sendMessage(to, text_, contentMetadata={'MENTION':'{"MENTIONEES":['+aa+']}'}, contentType=0)
    except Exception as error:
        logError(error)

        
def mentionMembers(to, mid):
    try:
        arrData = ""
        textx = "‚ïî‚ïê‚ïê[≈ö·∫æL‚Ç£–íŒå≈¶‡πÅ‡∏ó‡πá‡∏Ñ {} ‡∏Ñ‡∏ô]\n‚ï† ".format(str(len(mid)))
        arr = []
        no = 1
        for i in mid:
            mention = "@x\n"
            slen = str(len(textx))
            elen = str(len(textx) + len(mention) - 1)
            arrData = {'S':slen, 'E':elen, 'M':i}
            arr.append(arrData)
            textx += mention
            if no < len(mid):
                no += 1
                textx += "‚ï† "
            else:
                try:
                    textx += "‚ïö‚ïê‚ïê[‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°{} ]".format(str(line.getGroup(to).name))
                except:
                    pass
        line.sendMessage(to, textx, {'MENTION': str('{"MENTIONEES":' + json.dumps(arr) + '}')}, 0)
    except Exception as error:
        logError(error)
        line.sendMessage(to, "[ INFO ] Error :\n" + str(error))

def backupData():
    try:
        backup = settings
        f = codecs.open('temp.json','w','utf-8')
        json.dump(backup, f, sort_keys=True, indent=4, ensure_ascii=False)
        backup = read
        f = codecs.open('read.json','w','utf-8')
        json.dump(backup, f, sort_keys=True, indent=4, ensure_ascii=False)
        return True
    except Exception as error:
        logError(error)
        return False
#==============================================================================#
def summon(to, nama):
    aa = ""
    bb = ""
    strt = int(14)
    akh = int(14)
    nm = nama
    for mm in nm:
      akh = akh + 2
      aa += """{"S":"""+json.dumps(str(strt))+""","E":"""+json.dumps(str(akh))+""","M":"""+json.dumps(mm)+"},"""
      strt = strt + 6
      akh = akh + 4
      bb += "\xe2\x95\xa0 @x \n"
    aa = (aa[:int(len(aa)-1)])
    msg = Message()
    msg.to = to
    msg.text = "\xe2\x95\x94\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\n"+bb+"\xe2\x95\x9a\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90"
    msg.contentMetadata ={'MENTION':'{"MENTIONEES":['+aa+']}','EMTVER':'4'}
    print ("TAG ALL")
    try:
       line.sendMessage(msg)
    except Exception as error:
       print(error)

def restartBot():
    print ("RESTART SERVER")
    time.sleep(3)
    python = sys.executable
    os.execl(python, python, *sys.argv)
    
def logError(text):
    line.log(" Nut " + str(text))
    time_ = datetime.now()
    with open("errorLog.txt","a") as error:
        error.write("\n[%s] %s" % (str(time), text))

def sendMessage(to, text, contentMetadata={}, contentType=0):
    mes = Message()
    mes.to, mes.from_ = to, profile.mid
    mes.text = text
    mes.contentType, mes.contentMetadata = contentType, contentMetadata
    if to not in messageReq:
        messageReq[to] = -1
    messageReq[to] += 1
        
def sendMessageWithMention(to, lineMID):
    try:
        aa = '{"S":"0","E":"3","M":'+json.dumps(lineMID)+'}'
        text_ = '@x '
        line.sendMessage(to, text_, contentMetadata={'MENTION':'{"MENTIONEES":['+aa+']}'}, contentType=0)
    except Exception as error:
        logError(error)
 
def myhelp():
    myHelp =      "  ‚îÄ‚îÖ‚ïê‚ú•„Äê„Åï‡∏±‡¶èœÄ‡∏±‡Æû‚úµ‡∫ö‡∏¥‡§•‚Ñì‚Ñì“®‡§§Œ©„Äë‚ú•‚ïê‚îÖ‚îÄ "+ "  \n" + \
                  "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê "+ "\n" + \
                  "‚ï†‚öõ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‚û† ‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà1 "+ "  \n" + \
                  "‚ï†‚öõ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á2‚û† ‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà2 "+ "  \n" + \
                  "‚ï†‚öõ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á3‚û† ‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà 3 "+ "  \n" + \
                  "‚ï†‚öõ‡πÄ‡∏ä‡πá‡∏Ñ‚û† ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ "+ "  \n" + \
                  "‚ï†‚öõ‡∏£‡∏µ‡∏ö‡∏≠‡∏ó‚û† ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡∏ó‡πå‡∏ö‡∏≠‡∏ó "+ "  \n" + \
                  "‚ï†‚öõ‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô‚û†‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏ß‡∏•‡∏≤‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô "+ "  \n" + \
                  "‚ï†‚öõSp/Speed‚û†‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß "+ "  \n" + \
                  "‚ï†‚öõ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‚û† ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∏‡∏ì "+ "  \n" + \
                  "‚ï†‚öõCreator‚û†‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏™.‡∏ö‡∏≠‡∏ó "+ "  \n" + \
                  "‚ï†‚öõSelf off ‚û† ‡∏õ‡∏¥‡∏î‡∏ö‡∏≠‡∏ó "+" \n" +\
                  "‚ï†‚öõMe ‚û† ‡∏Ñ‡∏≠‡∏ó‡πÅ‡∏ó‡πá‡∏Ñ "+ "  \n" + \
                  "‚ï†‚öõMid ‚û†mid‡πÄ‡∏£‡∏≤ "+ "  \n" + \
                  "‚ï†‚öõ‡πÅ‡∏ó‡∏Ñ ‚û† ‡πÅ‡∏ó‡∏Ñ‡∏Ñ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏° "+ "  \n" + \
                  "‚ï†‚öõ‡∏ï‡∏±‡∏™ ‚û† ‡∏ï‡∏±‡∏™‡πÄ‡∏£‡∏≤ "+ "  \n" + \
                  "‚ï†‚öõ‡∏£‡∏π‡∏õ ‚û†‡∏£‡∏π‡∏õ‡πÄ‡∏£‡∏≤ "+ "  \n" + \
                  "‚ï†‚öõ‡∏£‡∏π‡∏õ‡∏õ‡∏Å ‚û† ‡∏õ‡∏Å‡πÄ‡∏£‡∏≤ "+ "  \n" + \
                  "‚ï†‚öõ‡∏£‡∏π‡∏õ‡∏ß‡∏µ‡∏î‡∏µ‡πÇ‡∏≠ ‚û†‡∏ß‡∏µ‡∏î‡∏µ‡πÇ‡∏≠‡πÄ‡∏£‡∏≤ "+ "\n" + \
                  "‚ï†‚öõ‡∏Ñ‡∏ó @ ‚û†‡∏î‡∏∂‡∏á‡∏Ñ‡∏≠‡∏ô‡πÅ‡∏ó‡πá‡∏Ñ "+ "  \n" + \
                  "‚ï†‚öõMid @ ‚û†‡∏î‡∏∂‡∏ámid "+ "  \n" + \
                  "‚ï†‚öõVideo @‚û†‡∏î‡∏∂‡∏á‡∏ß‡∏µ‡∏î‡∏µ‡πÇ‡∏≠ "+ "\n" +\
                  "‚ï†‚öõ‡∏ä‡∏∑‡πà‡∏≠ @ ‚û†‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠ "+ "  \n" + \
                  "‚ï†‚öõ‡∏ï‡∏±‡∏™ @ ‚û†‡∏î‡∏∂‡∏á‡∏ï‡∏±‡∏™ "+ "  \n" + \
                  "‚ï†‚öõ‡∏£‡∏π‡∏õ @ ‚û†‡∏î‡∏∂‡∏á‡∏£‡∏∏‡∏õ "+ "  \n" + \
                  "‚ï†‚öõ‡∏õ‡∏Å @ ‚û†‡∏î‡∏∂‡∏á‡∏£‡∏∏‡∏õ‡∏õ‡∏Å "+ "  \n" + \
                  "‚ï†‚öõ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• @ ‚û†‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• "+ "  \n" + \
                  "‚ï†‚öõ‡∏ä‡∏∑‡πà‡∏≠: (‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠) ‚û†‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ "+ "  \n" + \
                  "‚ï†‚öõ‡∏ï‡∏±‡∏™: (‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏™) ‚û†‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏±‡∏™ "+ "  \n" + \
                  "‚ï†‚öõ‡πÇ‡∏û‡∏™ ‚û†‡πÇ‡∏û‡∏™‡πÑ‡∏ó‡∏°‡πå‡πÑ‡∏•‡∏ô‡πå "+ "  \n" + \
                  "‚ï†‚öõCopy @ /‡∏Å‡πá‡∏≠‡∏õ‚û† ‡∏Å‡πá‡∏≠‡∏õ‡∏õ‡∏µ‡πâ"+ "  \n" + \
                  "‚ï†‚öõ‡∏Ñ‡∏∑‡∏ô‡∏£‡πà‡∏≤‡∏á /.‡∏Ñ‡∏∑‡∏ô‡∏£‡πà‡∏≤‡∏á‚û† ‡∏Ñ‡∏∑‡∏ô‡∏£‡πà‡∏≤‡∏á "+ "  \n" + \
                  "‚ï†‚öõ‡∏ö‡∏•‡πá‡∏≠‡∏Ñ ‚û† ‡πÄ‡∏ä‡πá‡∏Ñ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏•‡πá‡∏≠‡∏Ñ "+ "  \n" + \
                  "‚ï†‚öõ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô ‚û† ‡πÄ‡∏ä‡πá‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô"+ "  \n" + \
                  "‚ï†‚öõ‡∏à‡∏≥‡∏ô‡∏ß‡∏ômid ‚û†mid‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô "+ "  \n" + \
                  "‚ï†‚öõ‡∏Å‡∏•‡∏∏‡πà‡∏° ‚û† ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î "+ "  \n" + \
                  "‚ï†‚öõZx ‚û† ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏¥‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏ó‡∏∏‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏° "+ "  \n" + \
                  "‚ï†‚öõ‡πÅ‡∏ó‡∏Ñ ‚û† ‡πÅ‡∏ó‡∏Ñ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô "+ "  \n" + \
                  "‚ï†‚öõ‡πÄ‡∏•‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö @ ‚û† ‡∏û‡∏¥‡∏°‡∏ï‡∏≤‡∏° "+ "  \n" + \
                  "‚ï†‚öõ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å @ ‚û† ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏•‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö"+ "  \n" + \
                  "‚ï†‚öõNutmic on/off ‚û†‡πÄ‡∏•‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö ‡πÄ‡∏õ‡∏¥‡∏î ‡∏õ‡∏¥‡∏î "+ "  \n" + \
                  "‚ï†‚öõ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏•‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö ‚û† ‡πÄ‡∏ä‡πá‡∏Ñ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ "+ "  \n" + \
                  "‚ï†‚öõ‡∏´‡∏≤‡∏£‡∏π‡∏õ (‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏∏‡∏õ) "+ "  \n" + \
                  "‚ï†‚öõ‡∏£‡∏π‡∏õ‡∏Å‡∏≤‡∏£‡∏ï‡∏π‡∏ô (‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏∏‡∏õ) "+ "  \n" + \
                  "‚ï†‚öõ‡πÄ‡∏û‡∏•‡∏á (‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á) "+ "  \n" + \
                  "‚ï†‚öõ‡∏¢‡∏π‡∏ó‡∏π‡∏õ (‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏õ) "+ "  \n" + \
                  "‚ï†‚öõ‡∏ß‡∏µ‡∏î‡∏µ‡πÇ‡∏≠ (‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠) "+ " \n" +\
                  "‚ï†‚öõ‡∏´‡∏ô‡∏±‡∏á (‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏±‡∏á) "+ "  \n" + \
                  "‚ï†‚öõ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô (‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥) "+ "  \n" + \
                  "‚ï†‚öõ‡∏†‡∏≤‡∏û (‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥) "+ "  \n" + \
                  "‚ï†‚öõ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏¥‡∏ô‡∏™‡∏ï‡∏≤‡πÅ‡∏Å‡∏£‡∏° "+ "  \n" + \
                  "‚ï†‚öõ‡πÄ‡∏ß‡∏•‡∏≤ ‚û† ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏ß‡∏•‡∏≤ "+ "  \n" + \
                  "‚ï†‚öõ‡∏Ç‡∏≠‡∏´‡∏∑‡πà‡∏ô ‚û† ‡∏•‡∏¥‡πâ‡∏á‡∏´‡∏ô‡∏±‡∏á‡πÇ‡∏õ‡πä "+ "  \n" + \
                  "‚ï†‚öõ‡∏û‡∏π‡∏î ‚û† ‡∏™‡∏±‡πà‡∏á‡∏™‡∏¥‡∏£‡∏¥‡∏û‡∏π‡∏î "+ "  \n" + \
                  "‚ï†‚öõTr-th ‚û† ‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤ "+ "  \n" + \
                  "‚ï†‚öõDow (‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°) ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏≠‡∏î‡∏µ "+ "  \n" + \
                  "‚ï†‚öõ‡∏™‡∏õ‡∏µ‡∏î ‚û† ‡∏™‡∏õ‡∏µ‡∏î‡∏Ç‡∏≥‡πÜ "+ "  \n" + \
                  "‚ï†‚öõZt"+ "  \n" + \
                  "‚ï†‚öõZm"+ "  \n" + \
                  "‚ï†‚öõZc"+ "  \n" + \
                  "‚ï†‚öõ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®: "+ "  \n" + \
                  "‚ï†‚öõ‡πÇ‡∏ó‡∏£ ‚û† ‡πÄ‡∏ä‡∏¥‡∏ç‡πÇ‡∏ó‡∏£ "+ "  \n" + \
                  "‚ï†‚öõ‡∏•‡∏ö‡∏£‡∏±‡∏ô /‡∏•‡∏ö‡∏£‡∏±‡∏ô1 ‚û† ‡∏•‡∏ö‡∏£‡∏±‡∏ô "+ "  \n" + \
                  "‚ï†‚öõ‡∏•‡∏ö‡πÅ‡∏ä‡∏ó ‚û† ‡∏•‡∏ö‡πÅ‡∏ä‡∏ó "+ "  \n" + \
                  "‚ï†‚öõB on ‚û† ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÇ‡∏ï‡πâ‡∏ö‡∏•‡πá‡∏≠‡∏Ñ "+ "  \n" + \
                  "‚ï†‚öõB off ‚û† ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÇ‡∏ï‡πâ‡∏ö‡∏•‡πá‡∏≠‡∏Ñ "+ "  \n" + \
                  "‚ï†‚öõ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏Ç‡πâ‡∏≤ ‚û† ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏≠‡∏≠‡πÇ‡∏ï‡πâ "+ "  \n" + \
                  "‚ï†‚öõ‡∏õ‡∏¥‡∏î‡πÄ‡∏Ç‡πâ‡∏≤ ‚û† ‡∏õ‡∏¥‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏≠‡∏≠‡πÇ‡∏ï‡πâ "+ "  \n" + \
                  "‚ï†‚öõ‡πÅ‡∏ä‡∏ó on ‚û† ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏ä‡∏ó‡∏≠‡∏≠‡πÇ‡∏ï‡πâ "+ "  \n" + \
                  "‚ï†‚öõ‡πÅ‡∏ä‡∏ó off ‚û† ‡∏õ‡∏¥‡∏î‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏ä‡∏ó‡∏≠‡∏≠‡πÇ‡∏ï‡πâ "+ "  \n" + \
                  "‚ï†‚öõ‡∏ï‡∏¥‡πâ‡∏Å on ‚û† ‡πÄ‡∏ä‡∏Ñ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡πâ‡∏Å "+ "  \n" + \
                  "‚ï†‚öõ‡∏ï‡∏¥‡πâ‡∏Å off ‚û† ‡∏õ‡∏¥‡∏î‡πÄ‡∏ä‡∏Ñ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡πâ‡∏Å "+ "  \n" + \
                  "‚ï†‚öõ‡πÅ‡∏ó‡∏Ñ on ‚û† ‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏ô‡πÅ‡∏ó‡∏Ñ "+ "  \n" + \
                  "‚ï†‚öõ‡πÅ‡∏ó‡∏Ñ off ‚û† ‡∏õ‡∏¥‡∏î‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏ô‡πÅ‡∏ó‡∏Ñ "+ "  \n" + \
                  "‚ï†‚öõTag2 on ‚û† ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏Ñ‡∏ô‡πÅ‡∏ó‡∏Ñ "+ "  \n" + \
                  "‚ï†‚öõTag2 off ‚û† ‡∏õ‡∏¥‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏Ñ‡∏ô‡πÅ‡∏ó‡∏Ñ "+ "  \n" + \
                  "‚ï†‚öõ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ó‡∏Ñ: (‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°) "+ "  \n" + \
                  "‚ï†‚öõ‡πÄ‡∏õ‡∏¥‡∏î‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‚û† ‡πÄ‡∏õ‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤ "+ "  \n" + \
                  "‚ï†‚öõ‡∏õ‡∏¥‡∏î‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‚û† ‡∏õ‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤ "+ "  \n" + \
                  "‚ï†‚öõ‡πÄ‡∏õ‡∏¥‡∏î‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å‚û†‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å "+ "  \n" + \
                  "‚ï†‚öõ‡∏õ‡∏¥‡∏î‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å‚û† ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å"+ " \n" +\
                  "‚ï†‚öõ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏Ç‡πâ‡∏≤: (‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°) "+ "  \n" + \
                  "‚ï†‚öõ‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏≠‡∏Å: (‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°) "+ "  \n" + \
                  "‚ï†‚öõ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏° ‚û†‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏° "+ "  \n" + \
                  "‚ï†‚öõ‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡πâ‡∏á ‚û† ‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡πâ‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏° "+ "  \n" + \
                  "‚ï†‚öõ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡πâ‡∏á ‚û† ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡πâ‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏° "+ "  \n" + \
                  "‚ï†‚öõ‡∏Ç‡∏≠‡∏•‡∏¥‡πâ‡∏á "+ "  \n" + \
                  "‚ï†‚öõ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‚û† ‡∏•‡∏ö‡∏Ñ‡πâ‡∏≤‡∏á‡πÄ‡∏ä‡∏¥‡∏ç "+ "  \n" + \
                  "‚ï†‚öõ‡∏≠‡πà‡∏≤‡∏ô ‚û† ‡∏î‡∏π‡∏Ñ‡∏ô‡πÅ‡∏≠‡∏ö "+ " \n" +\
                  "‚ï†‚öõ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏ö ‚û† ‡πÄ‡∏•‡∏¥‡∏Å‡∏à‡∏±‡∏ö‡∏Ñ‡∏ô‡πÅ‡∏≠‡∏ö "+ "\n " + \
                  "‚ï†‚öõ‡πÑ‡∏ß‡∏£‡∏±‡∏™ ‚û† ‡∏•‡∏á‡πÑ‡∏ß‡∏£‡∏±‡∏™ "+ "  \n" + \
                  "‚ï†‚öõ‡∏ó‡∏µ‡∏°‡∏ö‡∏≠‡∏ó ‚û†Admin "+ "  \n" + \
                  "‚ï†‚öõ‡πÅ‡∏≠‡∏î ‚û† ‡πÄ‡∏ä‡πá‡∏Ñ‡πÅ‡∏≠‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏° "+ "  \n" + \
                  "‚ï†‚öõ‡πÑ‡∏≠‡∏î‡∏µ‡∏Å‡∏•‡∏∏‡πà‡∏° ‚û† ‡πÄ‡∏ä‡πá‡∏ÑGid "+ "  \n" + \
                  "‚ï†‚öõ‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏° ‚û† ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏° "+ "  \n" + \
                  "‚ï†‚öõ‡∏£‡∏π‡∏õ‡∏Å‡∏•‡∏∏‡πà‡∏° ‚û†‡∏î‡∏∂‡∏á‡∏£‡∏∏‡∏õ‡∏Å‡∏•‡∏∏‡πà‡∏° "+ "  \n" + \
                  "‚ï†‚öõ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ ‚û†‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å "+ "  \n" + \
                  "‚ï†‚öõVk @ ‚û†‡πÄ‡∏ï‡∏∞ ‡∏î‡∏∂‡∏á‡∏Å‡∏•‡∏±‡∏ö "+ "  \n" + \
                  "‚ï†‚öõ‡πÄ‡∏ï‡∏∞ @ ‚û† ‡πÄ‡∏ï‡∏∞ "+ "  \n" + \
                  "‚ï†‚öõ‡∏ü‡∏±‡∏Å @ ‚û† ‡πÄ‡∏ï‡∏∞ "+ "  \n" + \
                  "‚ï†‚öõBan @ ‚û†‡πÅ‡∏ö‡∏ô "+ "  \n" + \
                  "‚ï†‚öõUnban @ ‚û† ‡∏õ‡∏•‡∏î‡πÅ‡∏ö‡∏ô "+ "  \n" + \
                  "‚ï†‚öõAllban ‚û† ‡πÅ‡∏ö‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô "+ "  \n" + \
                  "‚ï†‚öõ‡πÄ‡∏ï‡∏∞‡πÅ‡∏ö‡∏ô ‚û† ‡πÄ‡∏ï‡∏∞‡∏Ñ‡∏ô‡∏ï‡∏¥‡∏î‡πÅ‡∏ö‡∏ô "+ "  \n" + \
                  "‚ï†‚öõ‡πÄ‡∏ä‡πá‡∏Ñ‡πÅ‡∏ö‡∏ô ‚û† ‡πÄ‡∏ä‡∏Ñ‡∏Ñ‡∏ô‡∏ï‡∏¥‡∏î‡πÅ‡∏ö‡∏ô "+ "  \n" + \
                  "‚ï†‚öõSpam on ‚û† ‡∏™‡πÅ‡∏õ‡∏° "+ "  \n" + \
                  "‚ï†‚öõSpam off ‚û† ‡∏™‡πÅ‡∏õ‡∏° "+ "  \n" + \
                  "‚ï†‚öõ@‡∏≠‡∏≠‡∏Å ‚û† ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏° "+ "  \n" + \
                  "‚ï†‚öõGcancel:         "+ "  \n" + \
                  "‚ï†‚öõ‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏ö‡∏ô ‚û† ‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏ö‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î "+ "  \n" + \
                  "‚ï†‚öõ‡∏°‡∏≠‡∏á ‚û† ‡∏ô‡∏±‡∏ö‡∏Ñ‡∏ô‡∏≠‡πà‡∏≤‡∏ô "+ "  \n" + \
                  "‚ï†‚öõ‡πÑ‡∏Ñ‡∏£‡∏≠‡πà‡∏≤‡∏ô ‚û† ‡∏î‡∏π‡∏Ñ‡∏ô‡∏≠‡πà‡∏≤‡∏ô "+ "  \n" + \
                  "‚ï†‚öõ‡πÄ‡∏ä‡∏¥‡∏ç/‡πÄ‡∏ä‡∏¥‡∏ô ‚û† ‡πÄ‡∏ä‡∏¥‡∏ç "+ "  \n" + \
                  "‚ï†‚öõ‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô / ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô "+ "  \n" + \
                  "‚ï†‚öõ‡∏Å‡∏±‡∏ô‡∏•‡∏ö on / off "+ "  \n" + \
                  "‚ï†‚öõ‡∏Å‡∏±‡∏ô‡∏¢‡∏Å on / off "+ "  \n" + \
                  "‚ï†‚öõ‡∏Å‡∏±‡∏ô‡πÄ‡∏ä‡∏¥‡∏ç on/off  "+ "  \n" + \
                  "‚ï†‚öõ‡∏Å‡∏±‡∏ô‡∏•‡∏¥‡πâ‡∏á on/off "+ "  \n" + \
                  "‚ï†‚öõ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô on / off "+ "  \n" + \
                  "‚ï†‚öõ‡∏Å‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤ on/ off "+ "  \n" + \
                  "‚ïö‚ïê‚ïê‚ïê–í¬•.VƒÖ≈Åƒ∑·ª≥≈óƒØ√® —Ç—îŒ¨–º “£Œ¨ƒâ—ú "
    return myHelp


def helptexttospeech():
    helpTextToSpeech =   "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚îì" + "\n" + \
                      "‚ï†‚ùÇ‚û£ af : ‡πÅ‡∏≠‡∏ü‡∏£‡∏¥‡∏Å‡∏±‡∏ô " + "\n " +\
                      "‚ï†‚ùÇ‚û£ sq : ‡∏≠‡∏±‡∏•‡πÄ‡∏ö‡πÄ‡∏ô‡∏µ‡∏¢" + "\n" + \
                      "‚ï†‚ùÇ‚û£ ar : ‡∏≠‡∏£‡∏≤‡∏ö‡∏¥‡∏Ñ" + "\n" + \
                      "‚ï†‚ùÇ‚û£ hy : ‡∏≠‡∏≤‡πÄ‡∏°‡πÄ‡∏ô‡∏µ‡∏¢" + "\n" + \
                      "‚ï†‚ùÇ‚û£ bn : ‡∏ö‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏µ‡πà" + "\n" + \
                      "‚ï†‚ùÇ‚û£ bs : ‡∏ö‡∏≠‡∏™‡πÄ‡∏ô‡∏µ‡∏¢" + "\n" + \
                      "‚ï†‚ùÇ‚û£ bg : ‡∏ö‡∏±‡∏á‡πÅ‡∏Å‡πÄ‡∏£‡∏µ‡∏¢" + "\n" + \
                      "‚ï†‚ùÇ‚û£ zh-cn : ‡∏à‡∏µ‡∏ô" + "\n" + \
                      "‚ï†‚ùÇ‚û£ zh-tw : ‡πÉ‡∏ï‡πâ‡∏´‡∏ß‡∏±‡∏ô" + "\n" + \
                      "‚ï†‚ùÇ‚û£ cs : ‡πÄ‡∏ä‡πá‡∏Å" + "\n" + \
                      "‚ï†‚ùÇ‚û£ nl : ‡∏î‡∏±‡∏ä" + "\n" + \
                      "‚ï†‚ùÇ‚û£ en : ‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©" + "\n" + \
                      "‚ï†‚ùÇ‚û£ et : ‡πÄ‡∏≠‡∏™‡πÇ‡∏ï‡πÄ‡∏ô‡∏µ‡∏¢‡∏ô" + "\n" + \
                      "‚ï†‚ùÇ‚û£ el : ‡∏Å‡∏£‡∏µ‡∏Å" + "\n" + \
                      "‚ï†‚ùÇ‚û£ id : ‡∏≠‡∏¥‡∏ô‡πÇ‡∏î‡∏ô‡∏µ‡πÄ‡∏ã‡∏µ‡∏¢" + "\n" + \
                      "‚ï†‚ùÇ‚û£ ga : ‡πÑ‡∏≠‡∏£‡∏¥‡∏™" + "\n" + \
                      "‚ï†‚ùÇ‚û£ it : ‡∏≠‡∏¥‡∏ï‡∏≤‡∏•‡∏µ" + "\n" + \
                      "‚ï†‚ùÇ‚û£ ja : ‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô" + "\n" + \
                      "‚ï†‚ùÇ‚û£ kn : ‡πÅ‡∏Ñ‡∏ô‡∏≤‡∏î‡∏≤" + "\n" + \
                      "‚ï†‚ùÇ‚û£ la : ‡∏•‡∏≤‡∏ï‡∏¥‡∏ô" + "\n" + \
                      "‚ï†‚ùÇ‚û£ lv : ‡∏•‡∏±‡∏ï‡πÄ‡∏ß‡∏µ‡∏¢" + "\n" + \
                      "‚ï†‚ùÇ‚û£ ms : ‡∏°‡∏≤‡πÄ‡∏•‡πÄ‡∏ã‡∏µ‡∏¢" + "\n" + \
                      "‚ï†‚ùÇ‚û£ mt : ‡∏°‡∏≠‡∏•‡πÄ‡∏ï‡∏™" + "\n" + \
                      "‚ï†‚ùÇ‚û£ mn : ‡∏°‡∏≠‡∏á‡πÇ‡∏Å‡πÄ‡∏•‡∏µ‡∏¢" + "\n" + \
                      "‚ï†‚ùÇ‚û£ my : ‡∏û‡∏°‡πà‡∏≤" + "\n" + \
                      "‚ï†‚ùÇ‚û£ fa : ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡∏µ‡∏¢" + "\n" + \
                      "‚ï†‚ùÇ‚û£ pt : ‡πÇ‡∏õ‡∏£‡∏ï‡∏∏‡πÄ‡∏Å‡∏®" + "\n" + \
                      "‚ï†‚ùÇ‚û£ ro : ‡πÇ‡∏£‡∏°‡∏≤‡πÄ‡∏ô‡∏µ‡∏¢" + "\n" + \
                      "‚ï†‚ùÇ‚û£ ru : ‡∏£‡∏±‡∏™‡πÄ‡∏ã‡∏µ‡∏¢" + "\n" + \
                      "‚ï†‚ùÇ‚û£ th : ‡πÑ‡∏ó‡∏¢" + "\n" + \
                      "‚ï†‚ùÇ‚û£ zu : ‡∏ã‡∏π‡∏•‡∏π" + "\n" + \
                      "‚ï∞‚ïê–í¬•.VƒÖ≈Åƒ∑·ª≥≈óƒØ√® —Ç—îŒ¨–º “£Œ¨ƒâ—ú" + "\n" +  \
                      "           "
    return helpTextToSpeech
    
def helplanguange():
    helpLanguange =    "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚îì" + "\n" + \
                       "‚ï† af : afrikaans" + "\n" + \
                       "‚ï† sq : albanian" + "\n" + \
                       "‚ï† am : amharic" + "\n" + \
                       "‚ï† ar : arabic" + "\n" + \
                       "‚ï† hy : armenian" + "\n" + \
                       "‚ï† az : azerbaijani" + "\n" + \
                       "‚ï† eu : basque" + "\n" + \
                       "‚ï† be : belarusian" + "\n" + \
                       "‚ï† bn : bengali" + "\n" + \
                       "‚ï† bs : bosnian" + "\n" + \
                       "‚ï† bg : bulgarian" + "\n" + \
                       "‚ï† ca : catalan" + "\n" + \
                       "‚ï† ceb : cebuano" + "\n" + \
                       "‚ï† ny : chichewa" + "\n" + \
                       "‚ï† zh-cn : chinese (simplified)" + "\n" + \
                       "‚ï† zh-tw : chinese (traditional)" + "\n" + \
                       "‚ï† co : corsican" + "\n" + \
                       "‚ï† hr : croatian" + "\n" + \
                       "‚ï† cs : czech" + "\n" + \
                       "‚ï† da : danish" + "\n" + \
                       "‚ï† nl : dutch" + "\n" + \
                       "‚ï† en : english" + "\n" + \
                       "‚ï† eo : esperanto" + "\n" + \
                       "‚ï† et : estonian" + "\n" + \
                       "‚ï† tl : filipino" + "\n" + \
                       "‚ï† fi : finnish" + "\n" + \
                       "‚ï† fr : french" + "\n" + \
                       "‚ï† fy : frisian" + "\n" + \
                       "‚ï† gl : galician" + "\n" + \
                       "‚ï† ka : georgian" + "\n" + \
                       "‚ï† de : german" + "\n" + \
                       "‚ï† el : greek" + "\n" + \
                       "‚ï† gu : gujarati" + "\n" + \
                       "‚ï† ht : haitian creole" + "\n" + \
                       "‚ï† ha : hausa" + "\n" + \
                       "‚ï† haw : hawaiian" + "\n" + \
                       "‚ï† iw : hebrew" + "\n" + \
                       "‚ï† hi : hindi" + "\n" + \
                       "‚ï† hmn : hmong" + "\n" + \
                       "‚ï† hu : hungarian" + "\n" + \
                       "‚ï† is : icelandic" + "\n" + \
                       "‚ï† ig : igbo" + "\n" + \
                       "‚ï† id : indonesian" + "\n" + \
                       "‚ï† ga : irish" + "\n" + \
                       "‚ï† it : italian" + "\n" + \
                       "‚ï† ja : japanese" + "\n" + \
                       "‚ï† jw : javanese" + "\n" + \
                       "‚ï† kn : kannada" + "\n" + \
                       "‚ï† kk : kazakh" + "\n" + \
                       "‚ï† km : khmer" + "\n" + \
                       "‚ï† ko : korean" + "\n" + \
                       "‚ï† ku : kurdish (kurmanji)" + "\n" + \
                       "‚ï† ky : kyrgyz" + "\n" + \
                       "‚ï† lo : lao" + "\n" + \
                       "‚ï† la : latin" + "\n" + \
                       "‚ï† lv : latvian" + "\n" + \
                       "‚ï† lt : lithuanian" + "\n" + \
                       "‚ï† lb : luxembourgish" + "\n" + \
                       "‚ï† mk : macedonian" + "\n" + \
                       "‚ï† mg : malagasy" + "\n" + \
                       "‚ï† ms : malay" + "\n" + \
                       "‚ï† ml : malayalam" + "\n" + \
                       "‚ï† mt : maltese" + "\n" + \
                       "‚ï† mi : maori" + "\n" + \
                       "‚ï† mr : marathi" + "\n" + \
                       "‚ï† mn : mongolian" + "\n" + \
                       "‚ï† my : myanmar (burmese)" + "\n" + \
                       "‚ï† ne : nepali" + "\n" + \
                       "‚ï† no : norwegian" + "\n" + \
                       "‚ï† ps : pashto" + "\n" + \
                       "‚ï† fa : persian" + "\n" + \
                       "‚ï† pl : polish" + "\n" + \
                       "‚ï† pt : portuguese" + "\n" + \
                       "‚ï† pa : punjabi" + "\n" + \
                       "‚ï† ro : romanian" + "\n" + \
                       "‚ï† ru : russian" + "\n" + \
                       "‚ï† sm : samoan" + "\n" + \
                       "‚ï† gd : scots gaelic" + "\n" + \
                       "‚ï† sr : serbian" + "\n" + \
                       "‚ï† st : sesotho" + "\n" + \
                       "‚ï† sn : shona" + "\n" + \
                       "‚ï† sd : sindhi" + "\n" + \
                       "‚ï† si : sinhala" + "\n" + \
                       "‚ï† sk : slovak" + "\n" + \
                       "‚ï† sl : slovenian" + "\n" + \
                       "‚ï† so : somali" + "\n" + \
                       "‚ï† es : spanish" + "\n" + \
                       "‚ï† su : sundanese" + "\n" + \
                       "‚ï† sw : swahili" + "\n" + \
                       "‚ï† sv : swedish" + "\n" + \
                       "‚ï† tg : tajik" + "\n" + \
                       "‚ï† ta : tamil" + "\n" + \
                       "‚ï† te : telugu" + "\n" + \
                       "‚ï† th : thai" + "\n" + \
                       "‚ï† tr : turkish" + "\n" + \
                       "‚ï† uk : ukrainian" + "\n" + \
                       "‚ï† ur : urdu" + "\n" + \
                       "‚ï† uz : uzbek" + "\n" + \
                       "‚ï† vi : vietnamese" + "\n" + \
                       "‚ï† cy : welsh" + "\n" + \
                       "‚ï† xh : xhosa" + "\n" + \
                       "‚ï† yi : yiddish" + "\n" + \
                       "‚ï† yo : yoruba" + "\n" + \
                       "‚ï† zu : zulu" + "\n" + \
                       "‚ï† fil : Filipino" + "\n" + \
                       "‚ï† he : Hebrew" + "\n" + \
                       "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚îõ" + "\n" + "\n\n" + \
                       "BY NUT"
    return helpLanguange
#==============================================================================#
def lineBot(op):
    try:
        if op.type == 0:
            return
        if op.type == 5:
            if settings["autoAdd"] == True:
                line.blockContact(op.param1)
        if op.type == 13:
            if lineMID in op.param3:
                G = line.getGroup(op.param1)
                if settings["autoJoin"] == True:
                    if settings["autoCancel"]["on"] == True:
                        if len(G.members) <= settings["autoCancel"]["members"]:
                            line.rejectGroupInvitation(op.param1)
                        else:
                            line.acceptGroupInvitation(op.param1)
                    else:
                        line.acceptGroupInvitation(op.param1)
                elif settings["autoCancel"]["on"] == True:
                    if len(G.members) <= settings["autoCancel"]["members"]:
                        line.rejectGroupInvitation(op.param1)
            else:
                Inviter = op.param3.replace("",',')
                InviterX = Inviter.split(",")
                matched_list = []
                for tag in settings["blacklist"]:
                    matched_list+=[str for str in InviterX if str == tag]
                if matched_list == []:
                    pass
                else:
                    line.cancelGroupInvitation(op.param1, matched_list)				

        if op.type == 25:
            msg = op.message
            text = msg.text
            msg_id = msg.id
            receiver = msg.to
            sender = msg._from
            if msg.toType == 0:
                if sender != line.profile.mid:
                    to = sender
                else:
                    to = receiver
            else:
                to = receiver
            if msg.contentType == 0:
                if text is None:
                    return
#==============================================================================#
                if text.lower() == '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á':
                    myHelp = myhelp()
                    line.sendMessage(to, str(myHelp))
                elif text.lower() == '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á2':
                    helpTextToSpeech = helptexttospeech()
                    line.sendMessage(to, str(helpTextToSpeech))
                elif text.lower() == '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á3':
                    helpLanguange = helplanguange()
                    line.sendMessage(to, str(helpLanguange))
#==============================================================================#
                elif text.lower() == 'speed':
                    start = time.time()
                    line.sendMessage(to, "„Äê„Åï‡∏±‡¶èœÄ‡∏±‡Æû‚úµ‡∫ö‡∏¥‡§•‚Ñì‚Ñì“®‡§§Œ©„Äë")
                    elapsed_time = time.time() - start
                    line.sendMessage(to,format(str(elapsed_time)))	
                elif text.lower() == 'sp':
                    start = time.time()
                    line.sendMessage(to, "„Äê„Åï‡∏±‡¶èœÄ‡∏±‡Æû‚úµ‡∫ö‡∏¥‡§•‚Ñì‚Ñì“®‡§§Œ©„Äë")
                    elapsed_time = time.time() - start
                    line.sendMessage(to,format(str(elapsed_time)))						
                elif text.lower() == '‡∏£‡∏µ‡∏ö‡∏≠‡∏ó':
                    line.sendMessage(to, "‚û†‡∏£‡∏µ‡∏ö‡∏≠‡∏ó‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
                    line.sendMessage(to, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡πá‡∏≠‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    restartBot()
                elif text.lower() == '‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô':
                    timeNow = time.time()
                    runtime = timeNow - botStart
                    runtime = format_timespan(runtime)
                    line.sendMessage(to, "„Äê„Åï‡∏±‡¶èœÄ‡∏±‡Æû‚úµ‡∫ö‡∏¥‡§•‚Ñì‚Ñì“®‡§§Œ©„Äë\n {}".format(str(runtime)))
                elif text.lower() == '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•':
                    try:
                        arr = []
                        owner = "u4862fe4b182b2fd194a3108e2f3662e8"
                        creator = line.getContact(owner)
                        contact = line.getContact(lineMID)
                        grouplist = line.getGroupIdsJoined()
                        contactlist = line.getAllContactIds()
                        blockedlist = line.getBlockedContactIds()
                        ret_ = "\n„Äê„Åï‡∏±‡¶èœÄ‡∏±‡Æû‚úµ‡∫ö‡∏¥‡§•‚Ñì‚Ñì“®‡§§Œ©„Äë"
                       # ret_ = "„Äê„Åï‡∏±‡¶èœÄ‡∏±‡Æû‚úµ‡∫ö‡∏¥‡§•‚Ñì‚Ñì“®‡§§Œ©„Äë"
                        ret_ += "\n‚ï†üòä‡∏ä‡∏∑‡πà‡∏≠ ‚û† {}".format(contact.displayName)
                        ret_ += "\n‚ï†üòä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° ‚û†  {}".format(str(len(grouplist)))
                        ret_ += "\n‚ï†üòä‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô ‚û†  {}".format(str(len(contactlist)))
                        ret_ += "\n‚ï†üòä‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏•‡πá‡∏≠‡∏Ñ ‚û†  {}".format(str(len(blockedlist)))
                        ret_ += "\n‚ï†üòä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ñ‡∏∏‡∏ì"
                        ret_ += "\n‚ï†üòäCREATOR ‚û†{}".format(creator.displayName)
                        line.sendContact(to, owner)
                        line.sendMessage(to, str(ret_))
                    except Exception as e:
                        line.sendMessage(msg.to, str(e))
#========================
                elif "Vk " in msg.text:
                        vkick0 = msg.text.replace("Vk ","")
                        vkick1 = vkick0.rstrip()
                        vkick2 = vkick1.replace("@","")
                        vkick3 = vkick2.rstrip()
                        _name = vkick3
                        gs = line.getGroup(msg.to)
                        targets = []
                        for s in gs.members:
                            if _name in s.displayName:
                                targets.append(s.mid)
                        if targets == []:
                            pass
                        else:
                            for target in targets:
                                try:
                                    line.kickoutFromGroup(msg.to,[target])
                                    line.findAndAddContactsByMid(target)
                                    line. inviteIntoGroup(msg.to,[target])
                                except:
                                    pass
                elif "‡πÇ‡∏ó‡∏£" == msg.text.lower():
                    line.inviteIntoGroupCall(msg.to,[uid.mid for uid in line.getGroup(msg.to).members if uid.mid != line.getProfile().mid])
                    line.sendMessage(msg.to,"‚û†‡πÄ‡∏ä‡∏¥‡∏ç‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (ÔΩ°‚óï‚Äø‚óïÔΩ°) ")	
                elif "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å" == msg.text.lower():
                    if msg.toType == 2:
                        group = line.getGroup(msg.to)
                        gMembMids = [contact.mid for contact in group.invitee]
                        for _mid in gMembMids:
                            line.cancelGroupInvitation(msg.to,[_mid])
                        line.sendMessage(to,"‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á‡πÄ‡∏ä‡∏¥‡∏ç‡πÅ‡∏•‡πâ‡∏ß (ÔΩ°‚óï‚Äø‚óïÔΩ°) " )           
#===========
                elif "‡∏™‡∏õ‡∏µ‡∏î" == msg.text.lower():
                    line.sendMessage(to,"„Äå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß...„Äç\n‚ñà‚ñà‚ñà‚ñí39%\n‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí69%\n‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí99%\n0.0000000000000000 second")
                    line.sendMessage(to,"0.0000000000000000 second")  
                    line.sendMessage(to,"„Äê„Åï‡∏±‡¶èœÄ‡∏±‡Æû‚úµ‡∫ö‡∏¥‡§•‚Ñì‚Ñì“®‡§§Œ©„Äë")
#==============================================================================#
                elif "creator" == msg.text.lower():
                    line.sendMessage(to,"„Äê„Åï‡∏±‡¶èœÄ‡∏±‡Æû‚úµ‡∫ö‡∏¥‡§•‚Ñì‚Ñì“®‡§§Œ©„Äë\nüòà")
                    line.sendContact(to, "u0035a5a6c5ae9d30c9a0992ecbc39395")
                elif "‡πÑ‡∏ß‡∏£‡∏±‡∏™" == msg.text.lower():
                    line.sendMessage(to, "‡∏´‡∏¢‡∏∏‡∏î ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏á‡∏ö")
                    line.sendContact(to, "ud95860b8e3a6b3d2454cde75d9a5e3ec',")
                elif "‡∏ó‡∏µ‡∏°‡∏ö‡∏≠‡∏ó" == msg.text.lower():
                    msg.contentType = 13
                    line.sendMessage(to, "CREAROT & ADMIN \n„Äê„Åï‡∏±‡¶èœÄ‡∏±‡Æû‚úµ‡∫ö‡∏¥‡§•‚Ñì‚Ñì“®‡§§Œ©„Äë")
                    line.sendContact(to, "u4862fe4b182b2fd194a3108e2f3662e8")
                    line.sendContact(to, "ue1d6a794435130d139f9c5dde19aa9e5")
                   # line.sendContact(to, "ubf4806077f2b20dd22fb3a7072eb0eb8")
                   # line.sendContact(to, "ufec28f9f699a2cb6444e62e5397fe115")
                   # line.sendContact(to, "ue1a44110ed4e82ba603010445f0ba585")
                   # line.sendContact(to, "u6588c368db2307a41862b7385e00f4d8")                    
#==============================================================================#
                elif text.lower() == '‡πÄ‡∏ä‡πá‡∏Ñ':
                    try:
                        ret_ = "‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"

                        if settings["autoAdd"] == True: ret_ += "\n‡∏≠‡∏≠‡πÇ‡∏ï‡πâ‡∏ö‡∏•‡πá‡∏≠‡∏Ñ ‚û† ‡πÄ‡∏õ‡∏¥‡∏î‚úî"
                        else: ret_ += "\n‡∏≠‡∏≠‡πÇ‡∏ï‡πâ‡∏ö‡∏•‡πá‡∏≠‡∏Ñ ‚û† ‡∏õ‡∏¥‡∏î‚ùå"
                        if settings["detectMention"] == True: ret_ += "\n‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡πá‡∏Ñ ‚û† ‡πÄ‡∏õ‡∏¥‡∏î‚úî"
                        else: ret_ += "\n‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ó‡πá‡∏Ñ ‚û† ‡∏õ‡∏¥‡∏î‚ùå"						
                        if settings["autoLeave"] == True: ret_ += "\‡∏≠‡∏≠‡∏Å‡πÅ‡∏ä‡∏ó‡∏£‡∏ß‡∏°‡∏≠‡∏≠‡πÇ‡∏ï‡πâ ‚û† ‡πÄ‡∏õ‡∏¥‡∏î‚úî"
                        else: ret_ += "\n‡∏≠‡∏≠‡∏Å‡πÅ‡∏ä‡∏ó‡∏£‡∏ß‡∏°‡∏≠‡∏≠‡πÇ‡∏ï‡πâ ‚û† ‡∏õ‡∏¥‡∏î‚ùå"
                        if settings["potoMention"] == True: ret_ += "\n‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏Ñ‡∏ô‡πÅ‡∏ó‡∏Ñ ‚û† ‡πÄ‡∏õ‡∏¥‡∏î‚úî"
                        else: ret_ += "\n‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏Ñ‡∏ô‡πÅ‡∏ó‡∏Ñ ‚û† ‡∏õ‡∏¥‡∏î‚ùå"
                        if settings["kickMention"] == True: ret_ += "\n‡πÄ‡∏ï‡∏∞‡∏Ñ‡∏ô‡πÅ‡∏ó‡∏Ñ ‚û† ‡πÄ‡∏õ‡∏¥‡∏î‚úî"
                        else: ret_ += "\n‡πÄ‡∏ï‡∏∞‡∏Ñ‡∏ô‡πÅ‡∏ó‡∏Ñ ‚û† ‡∏õ‡∏¥‡∏î‚ùå"
                        if RfuProtect["Protectjoin"] == True: ret_ += "\n‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏° ‚û† ‡πÄ‡∏õ‡∏¥‡∏î‚úî"
                        else: ret_ += "\n‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏ß‡∏° ‚û† ‡∏õ‡∏¥‡∏î‚ùå"	
                        if settings["autoRead"] == True: ret_ += "\n‡∏≠‡πà‡∏≤‡∏ô‡∏≠‡∏≠‡πÇ‡∏ï‡πâ ‚û† ‡πÄ‡∏õ‡∏¥‡∏î‚úî"
                        else: ret_ += "\n‡∏≠‡πà‡∏≤‡∏ô‡∏≠‡∏≠‡πÇ‡∏ï‡πâ ‚û† ‡∏õ‡∏¥‡∏î‚ùå"				
                        if settings["checkSticker"] == True: ret_ += "\n‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ï‡∏¥‡πâ‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå ‚û† ‡πÄ‡∏õ‡∏¥‡∏î‚úî"
                        else: ret_ += "\n‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ï‡∏¥‡πâ‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå ‚û† ‡∏õ‡∏¥‡∏î‚ùå"						
                        if RfuProtect["Protectguest"] == True: ret_ += "\n‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô ‚û† ‡πÄ‡∏õ‡∏¥‡∏î‚úî"
                        else: ret_ += "\n‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô ‚û† ‡∏õ‡∏¥‡∏î‚ùå"		
                        if RfuProtect["inviteprotect"] == True: ret_ += "\n‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏¥‡∏ç ‚û† ‡πÄ‡∏õ‡∏¥‡∏î‚úî"
                        else: ret_ += "\n‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏¥‡∏ç ‚û† ‡∏õ‡∏¥‡∏î‚ùå"
                        if RfuProtect["cancelprotect"] == True: ret_ += "\n‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç ‚û† ‡πÄ‡∏õ‡∏¥‡∏î‚úî"
                        else: ret_ += "\n‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç ‚û† ‡∏õ‡∏¥‡∏î‚ùå"
                        if RfuProtect["protect"] == True: ret_ += "\n‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ‚û† ‡πÄ‡∏õ‡∏¥‡∏î‚úî"
                        else: ret_ += "\n‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å  ‡∏õ‡∏¥‡∏î‚ùå"
                        if RfuProtect["linkprotect"] == True: ret_ += "\n‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏•‡∏¥‡πâ‡∏á QR ‚û† ‡πÄ‡∏õ‡∏¥‡∏î‚úî"
                        else: ret_ += "\n‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏•‡∏¥‡πâ‡∏á QR ‚û† ‡∏õ‡∏¥‡∏î‚ùå"
                        if settings["autoCancel"]["on"] == True:ret_+="\n‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤  " + str(settings["autoCancel"]["members"]) + "‚û† ‡πÄ‡∏õ‡∏¥‡∏î‚úî"
                        else: ret_ += "\n‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç‡∏Å‡∏•‡∏∏‡πà‡∏°  ‚û† ‡∏õ‡∏¥‡∏î‚ùå"
                        if settings["autoJoin"] == True: ret_ += "\n‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏≠‡∏≠‡πÇ‡∏ï‡πâ ‚û† ‡πÄ‡∏õ‡∏¥‡∏î‚úî "
                        else: ret_ += "\n‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏≠‡∏≠‡πÇ‡∏ï‡πâ ‚û† ‡∏õ‡∏¥‡∏î‚ùå"		
                        ret_ += "\n"
                        line.sendMessage(to, str(ret_))
                    except Exception as e:
                        line.sendMessage(msg.to, str(e))
                elif text.lower() == 'b on':
                    settings["autoAdd"] = True
                    line.sendMessage(to, "‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÇ‡∏ï‡πâ‡∏ö‡∏•‡πá‡∏≠‡∏Ñ (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                elif text.lower() == 'b off':
                    settings["autoAdd"] = False
                    line.sendMessage(to, "‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÇ‡∏ï‡πâ‡∏ö‡∏•‡πá‡∏≠‡∏Ñ (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                elif text.lower() == '‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏Ç‡πâ‡∏≤':
                    settings["autoJoin"] = True
                    line.sendMessage(to, "‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏≠‡∏≠‡πÇ‡∏ï‡πâ (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                elif text.lower() == '‡∏õ‡∏¥‡∏î‡πÄ‡∏Ç‡πâ‡∏≤':
                    settings["autoJoin"] = False
                    line.sendMessage(to, "‡∏õ‡∏¥‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏≠‡∏≠‡πÇ‡∏ï‡πâ (ÔΩ°‚óï‚Äø‚óïÔΩ°)")			
                elif text.lower() == '‡πÅ‡∏ä‡∏ó on':
                    settings["autoLeave"] = True
                    line.sendMessage(to, "‡∏≠‡∏≠‡∏Å‡πÅ‡∏ä‡∏ó‡∏£‡∏ß‡∏°‡∏≠‡∏≠‡πÇ‡∏ï‡πâ (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                elif text.lower() == '‡πÅ‡∏ä‡∏ó off':
                    settings["autoLeave"] = False
                    line.sendMessage(to, "‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡∏Å‡πÅ‡∏ä‡∏ó‡∏£‡∏ß‡∏°‡∏≠‡∏≠‡πÇ‡∏ï‡πâ (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                elif text.lower() == '‡∏≠‡πà‡∏≤‡∏ô on':
                    settings["autoRead"] = True
                    line.sendMessage(to, "‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏ä‡∏ó‡∏≠‡∏≠‡πÇ‡∏ï‡πâ (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                elif text.lower() == '‡∏≠‡πà‡∏≤‡∏ô off':
                    settings["autoRead"] = False
                    line.sendMessage(to, "‡∏õ‡∏¥‡∏î‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏ä‡∏ó‡∏≠‡∏≠‡πÇ‡∏ï‡πâ (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                elif text.lower() == '‡∏ï‡∏¥‡πâ‡∏Å on':
                    settings["checkSticker"] = True
                    line.sendMessage(to, "‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ ‡∏™‡∏ï‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                elif text.lower() == '‡∏ï‡∏¥‡πâ‡∏Å off':
                    settings["checkSticker"] = False
                    line.sendMessage(to, "‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ ‡∏™‡∏ï‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå (ÔΩ°‚óï‚Äø‚óïÔΩ°)")                   
#==============================================================================#
                elif text.lower() == 'me':
                    sendMessageWithMention(to, lineMID)
                    line.sendContact(to, lineMID)
                elif text.lower() == 'mid':
                    line.sendMessage(msg.to,"Mid (ÔΩ°‚óï‚Äø‚óïÔΩ°)\n " +  lineMID)
                elif text.lower() == '‡∏ä‡∏∑‡πà‡∏≠':
                    me = line.getContact(lineMID)
                    line.sendMessage(msg.to,"‡∏ä‡∏∑‡πà‡∏≠ (ÔΩ°‚óï‚Äø‚óïÔΩ°) \n" + me.displayName)
                elif text.lower() == '‡∏ï‡∏±‡∏™':
                    me = line.getContact(lineMID)
                    line.sendMessage(msg.to,"‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏±‡∏™ (ÔΩ°‚óï‚Äø‚óïÔΩ°) \n" + me.statusMessage)
                elif text.lower() == '‡∏£‡∏π‡∏õ':
                    me = line.getContact(lineMID)
                    line.sendImageWithURL(msg.to,"http://dl.profile.line-cdn.net/" + me.pictureStatus)
                elif text.lower() == '‡∏£‡∏π‡∏õ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠':
                    me = line.getContact(lineMID)
                    line.sendVideoWithURL(msg.to,"http://dl.profile.line-cdn.net/" + me.pictureStatus + "/vp")
                elif text.lower() == '‡∏£‡∏π‡∏õ‡∏õ‡∏Å':
                    me = line.getContact(lineMID)
                    cover = line.getProfileCoverURL(lineMID)    
                    line.sendImageWithURL(msg.to, cover)
                elif msg.text.lower().startswith("‡∏Ñ‡∏ó "):
                    if 'MENTION' in list(msg.contentMetadata.keys())!= None:
                        names = re.findall(r'@(\w+)', text)
                        mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                        mentionees = mention['MENTIONEES']
                        lists = []
                        for mention in mentionees:
                            if mention["M"] not in lists:
                                lists.append(mention["M"])
                        for ls in lists:
                            contact = line.getContact(ls)
                            mi_d = contact.mid
                            line.sendContact(msg.to, mi_d)
                elif msg.text.lower().startswith("mid "):
                    if 'MENTION' in list(msg.contentMetadata.keys())!= None:
                        names = re.findall(r'@(\w+)', text)
                        mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                        mentionees = mention['MENTIONEES']
                        lists = []
                        for mention in mentionees:
                            if mention["M"] not in lists:
                                lists.append(mention["M"])
                        ret_ = "[ Mid User ]"
                        for ls in lists:
                            ret_ += "\n{}" + ls
                        line.sendMessage(msg.to, str(ret_))
                elif msg.text.lower().startswith("‡∏ä‡∏∑‡πà‡∏≠ "):
                    if 'MENTION' in list(msg.contentMetadata.keys())!= None:
                        names = re.findall(r'@(\w+)', text)
                        mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                        mentionees = mention['MENTIONEES']
                        lists = []
                        for mention in mentionees:
                            if mention["M"] not in lists:
                                lists.append(mention["M"])
                        for ls in lists:
                            contact = line.getContact(ls)
                            line.sendMessage(msg.to, "(ÔΩ°‚óï‚Äø‚óïÔΩ°)  \n" + contact.displayName)
                elif msg.text.lower().startswith("‡∏ï‡∏±‡∏™ "):
                    if 'MENTION' in list(msg.contentMetadata.keys())!= None:
                        names = re.findall(r'@(\w+)', text)
                        mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                        mentionees = mention['MENTIONEES']
                        lists = []
                        for mention in mentionees:
                            if mention["M"] not in lists:
                                lists.append(mention["M"])
                        for ls in lists:
                            contact = line.getContact(ls)
                            line.sendMessage(msg.to, "(ÔΩ°‚óï‚Äø‚óïÔΩ°)  \n{}" + contact.statusMessage)
                elif msg.text.lower().startswith("‡∏£‡∏π‡∏õ "):
                    if 'MENTION' in list(msg.contentMetadata.keys())!= None:
                        names = re.findall(r'@(\w+)', text)
                        mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                        mentionees = mention['MENTIONEES']
                        lists = []
                        for mention in mentionees:
                            if mention["M"] not in lists:
                                lists.append(mention["M"])
                        for ls in lists:
                            path = "http://dl.profile.line.naver.jp/" + line.getContact(ls).pictureStatus
                            line.sendImageWithURL(msg.to, str(path))
#==========================================                            
                elif msg.text.lower().startswith("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• "):
                    if 'MENTION' in msg.contentMetadata.keys()!= None:
                        names = re.findall(r'@(\w+)', text)
                        mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                        mentionees = mention['MENTIONEES']
                        lists = []
                        for mention in mentionees:
                            if mention["M"] not in lists:
                                lists.append(mention["M"])
                        for ls in lists:
                            contact = line.getContact(ls)
                            line.sendMessage(msg.to, contact.displayName)
                        for mention in mentionees:
                            if mention["M"] not in lists:
                                lists.append(mention["M"])
                            contact = line.getContact(ls)
                            line.sendMessage(msg.to, contact.statusMessage)
                        for mention in mentionees:
                            if mention["M"] not in lists:
                                lists.append(mention["M"])
                        ret_ = ">"
                        for ls in lists:
                            ret_ += ls
                        line.sendMessage(msg.to, str(ret_))
                        for mention in mentionees:
                            if mention["M"] not in lists:
                                lists.append(mention["M"])
                        for ls in lists:
                            path = "http://dl.profile.line-cdn.net/" + line.getContact(ls).pictureStatus
                            line.sendImageWithURL(msg.to, str(path))                            
                elif msg.text.lower().startswith("video "):
                    if 'MENTION' in list(msg.contentMetadata.keys())!= None:
                        names = re.findall(r'@(\w+)', text)
                        mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                        mentionees = mention['MENTIONEES']
                        lists = []
                        for mention in mentionees:
                            if mention["M"] not in lists:
                                lists.append(mention["M"])
                        for ls in lists:
                            path = "http://dl.profile.line.naver.jp/" + line.getContact(ls).pictureStatus + "/vp"
                            line.sendImageWithURL(msg.to, str(path))
                elif msg.text.lower().startswith("‡∏õ‡∏Å "):
                    if line != None:
                        if 'MENTION' in list(msg.contentMetadata.keys())!= None:
                            names = re.findall(r'@(\w+)', text)
                            mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                            mentionees = mention['MENTIONEES']
                            lists = []
                            for mention in mentionees:
                                if mention["M"] not in lists:
                                    lists.append(mention["M"])
                            for ls in lists:
                                path = line.getProfileCoverURL(ls)
                                line.sendImageWithURL(msg.to, str(path))
                elif msg.text.lower().startswith("copy "):
                    if 'MENTION' in list(msg.contentMetadata.keys())!= None:
                        names = re.findall(r'@(\w+)', text)
                        mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                        mentionees = mention['MENTIONEES']
                        for mention in mentionees:
                            contact = mention["M"]
                            break
                        try:
                            line.cloneContactProfile(contact)
                            line.sendMessage(msg.to, "‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î (^‰∫∫^)")
                        except:
                            line.sendMessage(msg.to, "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                            
                elif text.lower() == '‡∏Ñ‡∏∑‡∏ô‡∏£‡πà‡∏≤‡∏á':
                    try:
                        lineProfile.displayName = str(myProfile["displayName"])
                        lineProfile.statusMessage = str(myProfile["statusMessage"])
                        lineProfile.pictureStatus = str(myProfile["pictureStatus"])
                        line.updateProfileAttribute(8, lineProfile.pictureStatus)
                        line.updateProfile(lineProfile)
                        line.sendMessage(msg.to, "(^‰∫∫^)")
                    except:
                        line.sendMessage(msg.to, "(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
						
#==============================================                    
                elif "gcancel:" in msg.text:
                    try:
                        strnum = msg.text.replace("gcancel:","")
                        if strnum == "off":
                                settings["autoCancel"]["on"] = False
                                if settings["lang"] == "JP":
                                    line.sendText(msg.to,str(settings["eror"]))
                                else:
                                    line.sendText(msg.to,"ÂÖ≥‰∫ÜÈÇÄËØ∑ÊãíÁªù„ÄÇË¶ÅÊó∂ÂºÄËØ∑ÊåáÂÆö‰∫∫Êï∞ÂèëÈÄÅ")
                        else:
                                num =  int(strnum)
                                settings["autoCancel"]["on"] = True
                                if settings["lang"] == "JP":
                                    line.sendText(msg.to, " ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á" + strnum + "‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
                                else:
                                    line.sendText(msg.to,strnum + "‰Ωø‰∫∫‰ª•‰∏ãÁöÑÂ∞èÁªÑÁî®Ëá™Âä®ÈÇÄËØ∑ÊãíÁªù")
                    except:
                        if settings["lang"] == "JP":
                                line.sendText(msg.to,str(settings["eror"]))
                        else:
                                line.sendText(msg.to,"Bizarre ratings")
                elif msg.text.lower().startswith("‡πÄ‡∏•‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö "):
                    targets = []
                    key = eval(msg.contentMetadata["MENTION"])
                    key["MENTIONEES"][0]["M"]
                    for x in key["MENTIONEES"]:
                        targets.append(x["M"])
                    for target in targets:
                        try:
                            settings["mimic"]["target"][target] = True
                            line.sendMessage(msg.to,"‡πÄ‡∏•‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                            break
                        except:
                            line.sendMessage(msg.to,"‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î (^‰∫∫^)")
                            break
                elif msg.text.lower().startswith("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å "):
                    targets = []
                    key = eval(msg.contentMetadata["MENTION"])
                    key["MENTIONEES"][0]["M"]
                    for x in key["MENTIONEES"]:
                        targets.append(x["M"])
                    for target in targets:
                        try:
                            del settings["mimic"]["target"][target]
                            line.sendMessage(msg.to,"‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏•‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß \n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                            break
                        except:
                            line.sendMessage(msg.to,"‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î (^‰∫∫^)")
                            break
                elif text.lower() == '‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏•‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö':
                    if settings["mimic"]["target"] == {}:
                        line.sendMessage(msg.to,"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    else:
                        mc = "   ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö"
                        for mi_d in settings["mimic"]["target"]:
                            mc += "\n "+line.getContact(mi_d).displayName
                        line.sendMessage(msg.to,mc + "\n    ≈ö·∫æL‚Ç£–íŒå≈¶ VƒÖ≈Åƒ∑·ª≥≈óƒØ√® \n—Ç—îŒ¨–º “£Œ¨ƒâ—ú")
                    
                elif "nutmic " in msg.text.lower():
                    sep = text.split(" ")
                    mic = text.replace(sep[0] + " ","")
                    if mic == "on":
                        if settings["mimic"]["status"] == False:
                            settings["mimic"]["status"] = True
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    elif mic == "off":
                        if settings["mimic"]["status"] == True:
                            settings["mimic"]["status"] = False
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
#==============================================================================#
                elif text.lower() == '‡πÅ‡∏≠‡∏î':
                    group = line.getGroup(to)
                    GS = group.creator.mid
                    line.sendContact(to, GS)
                    line.sendMessage(to, "‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                elif text.lower() == '‡πÑ‡∏≠‡∏î‡∏µ‡∏Å‡∏•‡∏∏‡πà‡∏°':
                    gid = line.getGroup(to)
                    line.sendMessage(to, "‡πÑ‡∏≠‡∏î‡∏µ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ " + gid.id + " \n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                elif text.lower() == '‡∏£‡∏π‡∏õ‡∏Å‡∏•‡∏∏‡πà‡∏°':
                    group = line.getGroup(to)
                    path = "http://dl.profile.line-cdn.net/" + group.pictureStatus
                    line.sendImageWithURL(to, path)
                elif text.lower() == '‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°':
                    gid = line.getGroup(to)
                    line.sendMessage(to, "‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°" + gid.name + " \n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                elif text.lower() == '‡∏Ç‡∏≠‡∏•‡∏¥‡πâ‡∏á':
                    if msg.toType == 2:
                        group = line.getGroup(to)
                        if group.preventedJoinByTicket == False:
                            ticket = line.reissueGroupTicket(to)
                            line.sendMessage(to, "‡∏•‡∏¥‡πâ‡∏áQR ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ \nhttps://line.me/R/ti/g/{}".format(str(ticket)))
                elif text.lower() == '‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡πâ‡∏á':
                    if msg.toType == 2:
                        group = line.getGroup(to)
                        if group.preventedJoinByTicket == False:
                            line.sendMessage(to, "‡∏•‡∏¥‡πâ‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‡∏™‡∏±‡πà‡∏á‡∏ß‡πà‡∏≤ ‡∏Ç‡∏≠‡∏á‡∏•‡∏¥‡πâ‡∏á \n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            group.preventedJoinByTicket = False
                            line.updateGroup(group)
                            line.sendMessage(to, "‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡πâ‡∏áQR‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                elif text.lower() == '‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡πâ‡∏á':
                    if msg.toType == 2:
                        group = line.getGroup(to)
                        if group.preventedJoinByTicket == True:
                            line.sendMessage(to, "‡∏•‡∏¥‡πâ‡∏áQR‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            group.preventedJoinByTicket = True
                            line.updateGroup(group)
                            line.sendMessage(to, "‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡πâ‡∏áQR ‡πÅ‡∏•‡πâ‡∏ß (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                elif text.lower() == '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°':
                    group = line.getGroup(to)
                    try:
                        gCreator = group.creator.displayName
                    except:
                        gCreator = "Tidak ditemukan"
                    if group.invitee is None:
                        gPending = "0"
                    else:
                        gPending = str(len(group.invitee))
                    if group.preventedJoinByTicket == True:
                        gQr = "‡∏õ‡∏¥‡∏î"
                        gTicket = "Tidak ada"
                    else:
                        gQr = "‡πÄ‡∏õ‡∏¥‡∏î"
                        gTicket = "https://line.me/R/ti/g/{}".format(str(line.reissueGroupTicket(group.id)))
                    path = "http://dl.profile.line-cdn.net/" + group.pictureStatus
                    ret_ = "   ≈ö·∫æL‚Ç£–íŒå≈¶ (ÔΩ°‚óï‚Äø‚óïÔΩ°)"
                    ret_ += "\n‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏° ‚û†  {}".format(str(group.name))
                    ret_ += "\n‡πÑ‡∏≠‡∏î‡∏µ‡∏Å‡∏•‡∏∏‡πà‡∏° ‚û†  {}".format(group.id)
                    ret_ += "\n‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏° ‚û†  {}".format(str(gCreator))
                    ret_ += "\n‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ‚û† {}".format(str(len(group.members)))
                    ret_ += "\n‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á‡πÄ‡∏ä‡∏¥‡∏ç ‚û† {}".format(gPending)
                    ret_ += "\n‡∏•‡∏¥‡πâ‡∏áQR ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏° ‚û† ".format(gQr)
                    ret_ += "\n–í¬•.VƒÖ≈Åƒ∑·ª≥≈óƒØ√® —Ç—îŒ¨–º “£Œ¨ƒâ—ú"
                    line.sendMessage(to, str(ret_))
                    line.sendImageWithURL(to, path)
#=======================================                                
                elif "‡πÇ‡∏û‡∏™ " in msg.text:
                    tl_text = msg.text.replace("‡πÇ‡∏û‡∏™ ","")
                    line.sendText(msg.to,"line://home/post?userMid="+lineMID+"&postId="+line.new_post(tl_text)["result"]["post"]["postInfo"]["postId"])
                elif "‡∏Å‡πá‡∏≠‡∏õ " in msg.text:
                  if msg._from in admin:
                    targets = []
                    key = eval(msg.contentMetadata["MENTION"])
                    key["MENTIONEES"][0]["M"]
                    for x in key["MENTIONEES"]:
                            targets.append(x["M"])
                    for target in targets:
                        try:
                            contact = line.getContact(target)
                            X = contact.displayName
                            profile = line.getProfile()
                            profile.displayName = X
                            line.updateProfile(profile)
                            line.sendMessage(msg.to, "Success...")
                        #---------------------------------------
                            Y = contact.statusMessage
                            lol = line.getProfile()
                            lol.statusMessage = Y
                            line.updateProfile(lol)
                        #---------------------------------------
                            P = contact.pictureStatus
                            hun = line.getProfile()
                            hun.pictureStatus = P
                            line.updateProfile(hun)
                        except Exception as e:
                            line.sendMessage(msg.to, "Failed!")
                            print (e)

                elif msg.text in [".‡∏Ñ‡∏∑‡∏ô‡∏£‡πà‡∏≤‡∏á"]:
                    try:
                        #line.updateProfile.pictureStatus(backup.pictureStatus)
                        line.updateProfile.statusMessage(backup.statusMessage)
                        line.updateProfile.displayName(backup.displayName)
                        line.sendMessage(msg.to, "‡∏Å‡∏•‡∏±‡∏ö‡∏£‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡πâ‡∏ß")
                    except Exception as e:
                        line.sendText(msg.to, str (e))                    

                elif text.lower() == '‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠':
                    if msg.toType == 2:
                        group = line.getGroup(to)
                        ret_ = "   ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô&‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"
                        no = 0 + 1
                        for mem in group.members:
                            ret_ += "\n‚Üú ‚Üù {}. {}".format(str(no), str(mem.displayName))
                            no += 1
                        ret_ += "\n   ‚Ü† ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {}   ‡∏Ñ‡∏ô ‚Üû ".format(str(len(group.members)))
                        line.sendMessage(to, str(ret_))
                elif text.lower() == '‡∏Å‡∏•‡∏∏‡πà‡∏°':
                        groups = line.groups
                        ret_ = "   ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
                        no = 0 + 1
                        for gid in groups:
                            group = line.getGroup(gid)
                            ret_ += "\n‚û† {}. {} | {}".format(str(no), str(group.name), str(len(group.members)))
                            no += 1
                        ret_ += "\n ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {} ‡∏Å‡∏•‡∏∏‡πà‡∏°  ".format(str(len(groups)))
                        line.sendMessage(to, str(ret_))

#                elif text.lower() == '1‡∏Å‡∏•‡∏∏‡πà‡∏°':
#                        groups = ki.groups
#                        ret_ = "   ‚öîÔ∏è ≈†‚Ç¨¬£‘≤ ‡∏ø‚ú™≈¶ Œ≤¬•.≈†Œ±—ó ‚öîÔ∏è "
#                        no = 0 + 1
#                        for gid in groups:
#                            group = ki.getGroup(gid)
#                            ret_ += "\n‚û¢ {}. {} | {}".format(str(no), str(group.name), str(len(group.members)))
#                            no += 1
#                        ret_ += "\n ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {} ‡∏Å‡∏•‡∏∏‡πà‡∏° ".format(str(len(groups)))
#                        ki.sendMessage(to, str(ret_))
#
#                elif text.lower() == '2‡∏Å‡∏•‡∏∏‡πà‡∏°':
#                        groups = kk.groups
#                        ret_ = "   ‚öîÔ∏è ≈†‚Ç¨¬£‘≤ ‡∏ø‚ú™≈¶ Œ≤¬•.≈†Œ±—ó ‚öîÔ∏è "
#                        no = 0 + 1
#                        for gid in groups:
#                            group = kk.getGroup(gid)
#                            ret_ += "\n‚û¢ {}. {} | {}".format(str(no), str(group.name), str(len(group.members)))
#                            no += 1
#                        ret_ += "\n  ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {} ‡∏Å‡∏•‡∏∏‡πà‡∏°".format(str(len(groups)))
#                        kk.sendMessage(to, str(ret_))
#
#                elif text.lower() == '3‡∏Å‡∏•‡∏∏‡πà‡∏°':
#                        groups = kc.groups
#                        ret_ = "‚ïî‚ïê‚ïê[ Group List ]"
#                        no = 0 + 1
#                        for gid in groups:
#                            group = kc.getGroup(gid)
#                            ret_ += "\n‚û¢ {}. {} | {}".format(str(no), str(group.name), str(len(group.members)))
#                            no += 1
#                        ret_ += "\n ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {} ‡∏Å‡∏•‡∏∏‡πà‡∏°".format(str(len(groups)))
#                        kc.sendMessage(to, str(ret_))
						
					
#==============================================================================#
#==============================================================================#          
                elif text.lower() == '‡πÅ‡∏ó‡∏Ñ':
                    group = line.getGroup(to)
                    midMembers = [contact.mid for contact in group.members]
                    midSelect = len(midMembers)//20
                    for mentionMembers in range(midSelect+1):
                            no = 0
                            ret_ = "‚ïî‚ïê‚ïê[ ‡∏®‡∏û‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Ç‡πà‡∏°‡∏Ç‡∏∑‡∏ô ]"
                            dataMid = []
                            for dataMention in group.members[mentionMembers*20 : (mentionMembers+1)*20]:
                                    dataMid.append(dataMention.mid)
                                    no += 1
                                    ret_ += "\n‚ï† {}. @!".format(str(no))
                            ret_ += "\n‚ïö‚ïê‚ïê[ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {} ‡∏®‡∏û ]".format(str(len(dataMid)))
                            line.sendMention(to, ret_, dataMid)
                         
#===================================================================#              

                elif text.lower() == '‡∏ô‡∏±‡∏ö':
                    tz = pytz.timezone("Asia/Jakarta")
                    timeNow = datetime.now(tz=tz)
                    day = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday","Friday", "Saturday"]
                    hari = ["‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå", "‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå", "‡∏ß‡∏±‡∏ô‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£", "‡∏ß‡∏±‡∏ô‡∏û‡∏∏‡∏ò", "‡∏ß‡∏±‡∏ô‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ", "‡∏ß‡∏±‡∏ô‡∏®‡∏∏‡∏Å‡∏£‡πå", "‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå"]
                    bulan = ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"]
                    hr = timeNow.strftime("%A")
                    bln = timeNow.strftime("%m")
                    for i in range(len(day)):
                        if hr == day[i]: hasil = hari[i]
                    for k in range(0, len(bulan)):
                        if bln == str(k): bln = bulan[k-1]
                    readTime = hasil + ", " + timeNow.strftime('%d') + " - " + bln + " - " + timeNow.strftime('%Y') + "\n‡πÄ‡∏ß‡∏•‡∏≤  [ " + timeNow.strftime('%H:%M:%S') + " ]"
                    if msg.to in read['readPoint']:
                            try:
                                del read['readPoint'][msg.to]
                                del read['readMember'][msg.to]
                                del read['readTime'][msg.to]
                            except:
                                pass
                            read['readPoint'][msg.to] = msg.id
                            read['readMember'][msg.to] = ""
                            read['readTime'][msg.to] = datetime.now().strftime('%H:%M:%S')
                            read['ROM'][msg.to] = {}
                            with open('read.json', 'w') as fp:
                                json.dump(read, fp, sort_keys=True, indent=4)
                                line.sendMessage(msg.to,"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏±‡∏ö‡∏Ñ‡∏ô‡∏≠‡πà‡∏≤‡∏ô\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    else:
                        try:
                            del read['readPoint'][msg.to]
                            del read['readMember'][msg.to]
                            del read['readTime'][msg.to]
                        except:
                            pass
                        read['readPoint'][msg.to] = msg.id
                        read['readMember'][msg.to] = ""
                        read['readTime'][msg.to] = datetime.now().strftime('%H:%M:%S')
                        read['ROM'][msg.to] = {}
                        with open('read.json', 'w') as fp:
                            json.dump(read, fp, sort_keys=True, indent=4)
                            line.sendMessage(msg.to, "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡∏Ñ‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡πÅ‡∏ó‡∏Ñ\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)\n" + readTime)
                            

                elif text.lower() == '‡∏≠‡πà‡∏≤‡∏ô':
                    tz = pytz.timezone("Asia/Jakarta")
                    timeNow = datetime.now(tz=tz)
                    day = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday","Friday", "Saturday"]
                    hari = ["‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå", "‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå", "‡∏ß‡∏±‡∏ô‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£", "‡∏ß‡∏±‡∏ô‡∏û‡∏∏‡∏ò", "‡∏ß‡∏±‡∏ô‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ", "‡∏ß‡∏±‡∏ô‡∏®‡∏∏‡∏Å‡∏£‡πå", "‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå"]
                    bulan = ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"]
                    hr = timeNow.strftime("%A")
                    bln = timeNow.strftime("%m")
                    for i in range(len(day)):
                        if hr == day[i]: hasil = hari[i]
                    for k in range(0, len(bulan)):
                        if bln == str(k): bln = bulan[k-1]
                    readTime = hasil + ", " + timeNow.strftime('%d') + " - " + bln + " - " + timeNow.strftime('%Y') + "\n‡πÄ‡∏ß‡∏•‡∏≤  [ " + timeNow.strftime('%H:%M:%S') + " ]"
                    if receiver in read['readPoint']:
                        if list(read["ROM"][receiver].items()) == []:
                            line.sendMessage(receiver,"‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô \nNone")
                        else:
                            chiya = []
                            for rom in list(read["ROM"][receiver].items()):
                                chiya.append(rom[1])
                            cmem = line.getContacts(chiya) 
                            zx = ""
                            zxc = ""
                            zx2 = []
                            xpesan = '‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô \n'
                        for x in range(len(cmem)):
                            xname = str(cmem[x].displayName)
                            pesan = ''
                            pesan2 = pesan+"@c\n"
                            xlen = str(len(zxc)+len(xpesan))
                            xlen2 = str(len(zxc)+len(pesan2)+len(xpesan)-1)
                            zx = {'S':xlen, 'E':xlen2, 'M':cmem[x].mid}
                            zx2.append(zx)
                            zxc += pesan2
                        text = xpesan+ zxc + "\n‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô \n" + readTime
                        try:
                            line.sendMessage(receiver, text, contentMetadata={'MENTION':str('{"MENTIONEES":'+json.dumps(zx2).replace(' ','')+'}')}, contentType=0)
                        except Exception as error:
                            print (error)
                        pass
                    else:
                        line.sendMessage(receiver,"‡∏™‡∏±‡πà‡∏á (‡∏°‡∏≠‡∏á) ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏±‡πà‡∏á (‡πÑ‡∏Ñ‡∏£‡∏≠‡πà‡∏≤‡∏ô) \n(^‰∫∫^) ")

                elif msg.text.lower().startswith("tr-af "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='af')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-sq "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='sq')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-am "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='am')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-ar "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='ar')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-hy "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='hy')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-az "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='az')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-eu "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='eu')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-be "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='be')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-bn "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='bn')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-bs "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='bs')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-bg "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='bg')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-ca "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='ca')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-ceb "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='ceb')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-ny "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='ny')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-zh-cn "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='zh-cn')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-zh-tw "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='zh-tw')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-co "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='co')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-hr "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='hr')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-cs "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='cs')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-da "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='da')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-nl "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='nl')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-en "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='en')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-et "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='et')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-fi "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='fi')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-fr "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='fr')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-fy "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='fy')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-gl "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='gl')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-ka "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='ka')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-de "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='de')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-el "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='el')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-gu "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='gu')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-ht "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='ht')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-ha "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='ha')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-haw "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='haw')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-iw "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='iw')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-hi "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='hi')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-hmn "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='hmn')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-hu "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='hu')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-is "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='is')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-ig "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='ig')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-id "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='id')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-ga "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='ga')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-it "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='it')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-ja "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='ja')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-jw "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='jw')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-kn "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='kn')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-kk "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='kk')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-km "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='km')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-ko "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='ko')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-ku "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='ku')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-ky "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='ky')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-lo "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='lo')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-la "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='la')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-lv "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='lv')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-lt "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='lt')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-lb "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='lb')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-mk "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='mk')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-mg "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='mg')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-ms "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='ms')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-ml "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='ml')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-mt "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='mt')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-mi "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='mi')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-mr "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='mr')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-mn "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='mn')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-my "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='my')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-ne "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='ne')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-no "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='no')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-ps "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='ps')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-fa "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='fa')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-pl "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='pl')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-pt "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='pt')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-pa "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='pa')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-ro "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='ro')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-ru "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='ru')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-sm "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='sm')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-gd "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='gd')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-sr "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='sr')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-st "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='st')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-sn "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='sn')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-sd "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='sd')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-si "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='si')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-sk "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='sk')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-sl "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='sl')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-so "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='so')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-es "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='es')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-su "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='su')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-sw "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='sw')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-sv "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='sv')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-tg "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='tg')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-ta "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='ta')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-te "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='te')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-th "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='th')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-tr "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='tr')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-uk "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='uk')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-ur "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='ur')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-uz "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='uz')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-vi "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='vi')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-cy "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='cy')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-xh "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='xh')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-yi "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='yi')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-yo "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='yo')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-zu "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='zu')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-fil "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='fil')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-he "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='he')
                    A = hasil.text
                    line.sendMessage(msg.to, A)


#=============================================#                    
                elif msg.text.lower().startswith("‡∏û‡∏π‡∏î "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'th'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-tr "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'tr'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-uk "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'uk'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-vi "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'vi'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-cy "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'cy'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")    

#==============================================================================#
                elif "‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏Å‡∏•‡∏∏‡πà‡∏° " in msg.text:
                    bc = msg.text.replace("‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏Å‡∏•‡∏∏‡πà‡∏° ","")
                    gid = line.getGroupIdsJoined()
                    for i in gid:
                        line.sendText(i,"======[‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏Å‡∏•‡∏∏‡πà‡∏°]======\n\n"+bc+"\n\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    
                elif "‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÅ‡∏ä‡∏ó " in msg.text:
                    bc = msg.text.replace("‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÅ‡∏ä‡∏ó ","")
                    gid = line.getAllContactIds()
                    for i in gid:
                        line.sendText(i,"======[‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÅ‡∏ä‡∏ó]======\n\n"+bc+"\n\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
#                elif "Bcvoice " in msg.text:
#                    bctxt = msg.text.replace("Bcvoice ", "")
#                    bc = ("‚öîÔ∏è ≈†‚Ç¨¬£‘≤ ‡∏ø‚ú™≈¶ Œ≤¬•.≈†Œ±—ó ‚öîÔ∏è \n≈¶‚Ç¨ƒÄ ç ƒ¶ƒÄ¬¢‚Ç≠‚Ç¨∆â ƒäŒ¶∆â‚Ç¨")
#                    cb = (bctxt + bc)
#                    tts = gTTS(cb, lang='id', slow=False)
#                    tts.save('tts.mp3')
#                    n = line.getGroupIdsJoined()
#                    for manusia in n:
#                        line.sendAudio(manusia, 'tts.mp3')
#
#                elif "Cbcvoice " in msg.text:
#                    bctxt = msg.text.replace("Cbcvoice ", "")
#                    bc = ("‚öîÔ∏è ≈†‚Ç¨¬£‘≤ ‡∏ø‚ú™≈¶ Œ≤¬•.≈†Œ±—ó ‚öîÔ∏è \n≈¶‚Ç¨ƒÄ ç ƒ¶ƒÄ¬¢‚Ç≠‚Ç¨∆â ƒäŒ¶∆â‚Ç¨")
#                    cb = (bctxt + bc)
#                    tts = gTTS(cb, lang='id', slow=False)
#                    tts.save('tts.mp3')
#                    n = line.getAllContactIdsJoined()
 #                   for manusia in n:
#                        line.sendAudio(manusia, 'tts.mp3')
#
                elif "Dow " in msg.text:
                      try:
                          wiki = msg.text.lower().replace("Dow ","")
                          wikipedia.set_lang("id")
                          pesan="Title ("
                          pesan+=wikipedia.page(wiki).title
                          pesan+=")\n\n"
                          pesan+=wikipedia.summary(wiki, sentences=1)
                          pesan+="\n"
                          pesan+=wikipedia.page(wiki).url
                          line.sendMessage(msg.to, pesan)
                      except:
                              try:
                                  pesan="‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏µ‡∏î ‡∏à‡∏≥‡∏Å‡∏±‡∏î ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°! ‡πÇ‡∏õ‡∏£‡∏î‡∏Ñ‡∏•‡∏¥‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå\n"
                                  pesan+=wikipedia.page(wiki).url
                                  line.sendText(msg.to, pesan)
                              except Exception as e:
                                  line.sendMessage(msg.to, str(e))
#=================================
                elif text.lower() == 'self off':
                    line.sendMessage(receiver, '≈ö·∫æL‚Ç£–íŒå≈¶ Œå‚Ç£‚Ç£ \n(ÔΩ°‚óï‚Äø‚óïÔΩ°) ')
                    print ("Selfbot Off")
                    exit(1)   
#==============================================
                elif msg.text == "‡∏Ç‡∏≠‡∏´‡∏∑‡πà‡∏ô":
                	line.sendMessage(receiver,">nekopoi.host\n>sexvideobokep.com\n>memek.com\n>pornktube.com\n>faketaxi.com\n>videojorok.com\n>watchmygf.mobi\n>xnxx.com\n>pornhd.com\n>xvideos.com\n>vidz7.com\n>m.xhamster.com\n>xxmovies.pro\n>youporn.com\n>pornhub.com\n>youjizz.com\n>thumzilla.com\n>anyporn.com\n>brazzers.com\n>redtube.com\n>youporn.com")
                elif msg.text == ".‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®":
                	line.sendMessage(msg.to,str)      
#========================================
                elif msg.text in ["zx"]:
                    if msg.toType == 2:
                        ginfo = line.getGroup(receiver)
                        try:
                            line.leaveGroup(receiver)							
                        except:
                            pass        
#=======================================                        
                elif "google " in msg.text.lower():
                    sep = text.split(" ")
                    search = text.replace(sep[0] + " ","")
                    params = {"search_query": search}
                    with requests.session() as web:
                        web.headers["User-Agent"] = random.choice(settings["userAgent"])
                        r = web.get("https://www.google.com/search?q=", params = params)
                        soup = BeautifulSoup(r.content, "html.parser")
                        ret_ = "‚ïî‚ïê‚ïê[ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ]"
                        datas = []
                        for data in soup.select(".yt-lockup-title > a[title]"):
                            if "&lists" not in data["href"]:
                                datas.append(data)
                        for data in datas:
                            ret_ += "\n‚ï†‚ïê‚ïê[ {} ]".format(str(data["title"]))
                            ret_ += "\n‚ï† https://www.google.com/search?q={}".format(str(data["href"]))
                        ret_ += "\n‚ïö‚ïê‚ïê[ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏ö {} ]".format(len(datas))
                        line.sendMessage(to, str(ret_))
                        
                elif "‡∏ß‡∏µ‡∏î‡∏µ‡πÇ‡∏≠ " in msg.text.lower():
                    sep = text.split(" ")
                    search = text.replace(sep[0] + "‡∏ß‡∏µ‡∏î‡∏µ‡πÇ‡∏≠ ","")
                    params = {"search_query": search}
                    with requests.session() as web:
                        web.headers["User-Agent"] = random.choice(settings["userAgent"])
                        r = web.get("https://www.youtube.com/results", params = params)
                        soup = BeautifulSoup(r.content, "html.parser")
                        ret_ = "‚ïî‚ïê‚ïê[ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ]"
                        datas = []
                        for data in soup.select(".yt-lockup-title > a[title]"):
                            if "&lists" not in data["href"]:
                                datas.append(data)
                        for data in datas:
                            ret_ += "\n‚ï†‚ïê‚ïê[ {} ]".format(str(data["title"]))
                            ret_ += "\n‚ï† https://www.youtube.com{}".format(str(data["href"]))
                        ret_ += "\n‚ïö‚ïê‚ïê[ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏ö {} ]".format(len(datas))
                        line.sendMessage(to, str(ret_))
                        
                elif "‡∏´‡∏ô‡∏±‡∏á " in msg.text.lower():
                    sep = text.split(" ")
                    search = text.replace(sep[0] + "‡∏´‡∏ô‡∏±‡∏á ","")
                    params = {"search_query": search}
                    with requests.session() as web:
                        web.headers["User-Agent"] = random.choice(settings["userAgent"])
                        r = web.get("https://www.youtube.com/results", params = params)
                        soup = BeautifulSoup(r.content, "html.parser")
                        ret_ = "‚ïî‚ïê‚ïê[ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ]"
                        datas = []
                        for data in soup.select(".yt-lockup-title > a[title]"):
                            if "&lists" not in data["href"]:
                                datas.append(data)
                        for data in datas:
                            ret_ += "\n‚ï†‚ïê‚ïê[ {} ]".format(str(data["title"]))
                            ret_ += "\n‚ï† https://www.youtube.com{}".format(str(data["href"]))
                        ret_ += "\n‚ïö‚ïê‚ïê[ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏ö {} ]".format(len(datas))
                        line.sendMessage(to, str(ret_))
                        
                elif "‡πÄ‡∏û‡∏•‡∏á " in msg.text.lower():
                    sep = text.split(" ")
                    search = text.replace(sep[0] + "‡πÄ‡∏û‡∏•‡∏á ","")
                    params = {"search_query": search}
                    with requests.session() as web:
                        web.headers["User-Agent"] = random.choice(settings["userAgent"])
                        r = web.get("https://www.youtube.com/results", params = params)
                        soup = BeautifulSoup(r.content, "html.parser")
                        ret_ = "‚ïî‚ïê‚ïê[ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ]"
                        datas = []
                        for data in soup.select(".yt-lockup-title > a[title]"):
                            if "&lists" not in data["href"]:
                                datas.append(data)
                        for data in datas:
                            ret_ += "\n‚ï†‚ïê‚ïê[ {} ]".format(str(data["title"]))
                            ret_ += "\n‚ï† https://www.youtube.com{}".format(str(data["href"]))
                        ret_ += "\n‚ïö‚ïê‚ïê[ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏ö {} ]".format(len(datas))
                        line.sendMessage(to, str(ret_))         
#=========================================
                elif msg.text.lower().startswith("‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô "):
                    sep = msg.text.split(" ")
                    textnya = msg.text.replace(sep[0] + " ","")
                    urlnya = "http://chart.apis.google.com/chart?chs=480x80&cht=p3&chtt=" + textnya + "&chts=FFFFFF,70&chf=bg,s,000000"
                    line.sendImageWithURL(msg.to, urlnya)        

#                elif "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏ô‡∏±‡∏á" in msg.text:
#                    proses = msg.text.split(":")
#                    get = msg.text.replace(proses[0] + ":","")
#                    getfilm = get.split()
#                    title = getfilm[0]
#                    tahun = getfilm[1]
#                    r = requests.get('http://www.omdbapi.com/?t='+title+'&y='+tahun+'&plot=full&apikey=4bdd1d70')
#                    start = time.time()
#                    data=r.text
#                    data=json.loads(data)
#                    hasil = "Informasi \n" +str(data["Title"])+ " (" +str(data["Year"])+ ")"
#                    hasil += "\n\n " +str(data["Plot"])
#                    hasil += "\n\nDirector : " +str(data["Director"])
#                    hasil += "\nActors   : " +str(data["Actors"])
#                    hasil += "\nRelease : " +str(data["Released"])
#                    hasil += "\nGenre    : " +str(data["Genre"])
#                    hasil += "\nRuntime   : " +str(data["Runtime"])
#                    path = data["Poster"]
#                    line.sendImageWithURL(msg.to, str(path))
#                    line.sendMessage(msg.to,hasil)

                elif text.lower() == '‡πÄ‡∏ß‡∏•‡∏≤':
                    tz = pytz.timezone("Asia/Makassar")
                    timeNow = datetime.now(tz=tz)
                    day = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday","Friday", "Saturday"]
                    hari = ["‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå", "‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå", "‡∏ß‡∏±‡∏ô‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£", "‡∏ß‡∏±‡∏ô‡∏û‡∏∏‡∏ò", "‡∏ß‡∏±‡∏ô‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ", "‡∏ß‡∏±‡∏ô‡∏®‡∏∏‡∏Å‡∏£‡πå", "‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå"]
                    bulan = ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"]
                    hr = timeNow.strftime("%A")
                    bln = timeNow.strftime("%m")
                    for i in range(len(day)):
                        if hr == day[i]: hasil = hari[i]
                    for k in range(0, len(bulan)):
                        if bln == str(k): bln = bulan[k-1]
                    readTime = hasil + ", " + timeNow.strftime('%d') + " - " + bln + " - " + timeNow.strftime('%Y') + "\n‡πÄ‡∏ß‡∏•‡∏≤ : [ " + timeNow.strftime('%H:%M:%S') + " ]"
                    line.sendMessage(msg.to, readTime)                 


                
                elif "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏¥‡∏ô‡∏™‡∏ï‡∏≤‡πÅ‡∏Å‡∏£‡∏°" in msg.text.lower():
                    sep = text.split(" ")
                    search = text.replace(sep[0] + " ","")
                    with requests.session() as web:
                        web.headers["User-Agent"] = random.choice(settings["userAgent"])
                        r = web.get("https://www.instagram.com/{}/?__a=1".format(search))
                        try:
                            data = json.loads(r.text)
                            ret_ = "   ≈ö·∫æL‚Ç£–íŒå≈¶ L√ç≈á·ªÄ"
                            ret_ += "\n ‡∏ä‡∏∑‡πà‡∏≠   {}".format(str(data["user"]["full_name"]))
                            ret_ += "\n ‡∏¢‡∏π‡πÄ‡∏ã‡∏≠‡πÄ‡∏ô‡∏° : {}".format(str(data["user"]["username"]))
                            ret_ += "\n ‡∏ï‡∏±‡∏™  {}".format(str(data["user"]["biography"]))
                            ret_ += "\n ‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°   {}".format(format_number(data["user"]["followed_by"]["count"]))
                            ret_ += "\n ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°   {}".format(format_number(data["user"]["follows"]["count"]))
                            if data["user"]["is_verified"] == True:
                                ret_ += "\n ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô: ‡πÅ‡∏•‡πâ‡∏ß"
                            else:
                                ret_ += "\n ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô: ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ"
                            if data["user"]["is_private"] == True:
                                ret_ += "\n Akun Pribadi : Iya"
                            else:
                                ret_ += "\n ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•: ‡πÑ‡∏°‡πà"
                            ret_ += "\n Post : {}".format(format_number(data["user"]["media"]["count"]))
                            ret_ += "\n[ https://www.instagram.com/{} ]".format(search)
                            path = data["user"]["profile_pic_url_hd"]
                            line.sendImageWithURL(to, str(path))
                            line.sendMessage(to, str(ret_))
                        except:
                            line.sendMessage(to, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")

                    line.sendMessage(to, str(ret_))
                elif "‡∏´‡∏≤‡∏£‡∏π‡∏õ" in msg.text.lower():
                    separate = msg.text.split(" ")
                    search = msg.text.replace(separate[0] + " ","")
                    with requests.session() as web:
                        web.headers["User-Agent"] = random.choice(settings["userAgent"])
                        r = web.get("http://rahandiapi.herokuapp.com/imageapi?key=betakey&q={}".format(urllib.parse.quote(search)))
                        data = r.text
                        data = json.loads(data)
                        if data["result"] != []:
                            items = data["result"]
                            path = random.choice(items)
                            a = items.index(path)
                            b = len(items)
                            line.sendImageWithURL(to, str(path))
                elif "‡∏£‡∏π‡∏õ‡∏Å‡∏≤‡∏£‡∏ï‡∏π‡∏ô" in msg.text.lower():
                    separate = msg.text.split(" ")
                    search = msg.text.replace(separate[0] + " ","")
                    with requests.session() as web:
                        web.headers["User-Agent"] = random.choice(settings["userAgent"])
                        r = web.get("http://rahandiapi.herokuapp.com/imageapi?key=betakey&q={}".format(urllib.parse.quote(search)))
                        data = r.text
                        data = json.loads(data)
                        if data["result"] != []:
                            items = data["result"]
                            path = random.choice(items)
                            a = items.index(path)
                            b = len(items)
                            line.sendImageWithURL(to, str(path))
                elif "‡∏¢‡∏π‡∏ó‡∏π‡∏õ" in msg.text.lower():
                    sep = text.split(" ")
                    search = text.replace(sep[0] + " ","")
                    params = {"search_query": search}
                    with requests.session() as web:
                        web.headers["User-Agent"] = random.choice(settings["userAgent"])
                        r = web.get("https://www.youtube.com/results", params = params)
                        soup = BeautifulSoup(r.content, "html.parser")
                        ret_ = "‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ï‡∏≤‡∏°‡∏ô‡∏µ‡πâ"
                        datas = []
                        for data in soup.select(".yt-lockup-title > a[title]"):
                            if "&lists" not in data["href"]:
                                datas.append(data)
                        for data in datas:
                            ret_ += "\n‚ãô {} ]".format(str(data["title"]))
                            ret_ += "\n‚ãô https://www.youtube.com{}".format(str(data["href"]) + "\n")
                        ret_ += "\n\n‚ãô ‡∏ó‡∏µ‡πà‡∏û‡∏ö {}  ‡∏Ñ‡∏•‡∏¥‡∏õ".format(len(datas))
                        line.sendMessage(to, str(ret_))

                elif msg.text in ["‡πÅ‡∏≠‡∏ö"]:
                    try:
                        del RfuCctv['point'][msg.to]
                        del RfuCctv['sidermem'][msg.to]
                        del RfuCctv['cyduk'][msg.to]
                    except:
                        pass
                    RfuCctv['point'][msg.to] = msg.id
                    RfuCctv['sidermem'][msg.to] = ""
                    RfuCctv['cyduk'][msg.to]=True
                    line.sendMessage(msg.to,"‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡∏Ñ‡∏ô‡∏≠‡πà‡∏≤‡∏ô (ÔΩ°‚óï‚Äø‚óïÔΩ°) ")
                elif msg.text in ["‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏ö"]:
                    if msg.to in RfuCctv['point']:
                        RfuCctv['cyduk'][msg.to]=False
                        #line.sendText(msg.to, RfuCctv['sidermem'][msg.to])
                    #else:
                        line.sendMessage(msg.to, "‡πÄ‡∏•‡∏¥‡∏Å‡∏à‡∏±‡∏ö‡∏Ñ‡∏ô‡πÅ‡∏≠‡∏ö‡∏•‡∏∞ (ÔΩ°‚óï‚Äø‚óïÔΩ°)")



                elif text.lower() == '‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô':
                    contactlist = line.getAllContactIds()
                    kontak = line.getContacts(contactlist)
                    num=1
                    msgs="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô&‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô"
                    for ids in kontak:
                        msgs+="\n[%i] %s" % (num, ids.displayName)
                        num=(num+1)
                    msgs+="\n‡∏à‡∏≥‡∏ô‡∏ß‡∏ô  %i" % len(kontak)
                    line.sendMessage(msg.to, msgs)

                elif msg.text in ["‡∏ö‡∏•‡πá‡∏≠‡∏Ñ"]: 
                    blockedlist = line.getBlockedContactIds()
                    kontak = line.getContacts(blockedlist)
                    num=1
                    msgs="‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡∏ö‡∏•‡πá‡∏≠‡∏Ñ (^‰∫∫^)"
                    for ids in kontak:
                        msgs+="\n[%i] %s" % (num, ids.displayName)
                        num=(num+1)
                    msgs+="\n‡∏à‡∏≥‡∏ô‡∏ß‡∏ô  %i" % len(kontak)
                    line.sendMessage(receiver, msgs)

                elif msg.text in ["‡∏à‡∏≥‡∏ô‡∏ß‡∏ômid"]: 
                    gruplist = line.getAllContactIds()
                    kontak = line.getContacts(gruplist)
                    num=1
                    msgs="≈ö·∫æL‚Ç£–íŒå≈¶ L√ç≈á·ªÄ"
                    for ids in kontak:
                        msgs+="\n[%i] %s" % (num, ids.mid)
                        num=(num+1)
                    msgs+="\n‡∏à‡∏≥‡∏ô‡∏ß‡∏ô  %i" % len(kontak)
                    line.sendMessage(receiver, msgs)



#                elif msg.text.lower() == '‡πÄ‡∏ä‡∏¥‡∏ç‡∏Å‡∏∏':
#                	if msg.toType == 2:                
#                           ginfo = line.getGroup(receiver)
#                           try:
#                               gcmid = ginfo.creator.mid
#                           except:
#                               gcmid = "Error"
#                           if settings["lang"] == "JP":
#                               line.inviteIntoGroup(receiver,[gcmid])
#                               line.sendMessage(receiver, "‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏Å‡∏•‡∏∏‡πà‡∏°")
#                           else:
#                               line.inviteIntoGroup(receiver,[gcmid])
#                               line.sendMessage(receiver, "‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÅ‡∏•‡πâ‡∏ß")

                elif msg.text in ["@‡∏≠‡∏≠‡∏Å"]:
                    if msg.toType == 2:
                        ginfo = line.getGroup(receiver)
                        try:
                            line.leaveGroup(receiver)
                            #ki.leaveGroup(receiver)
                            #kk.leaveGroup(receiver)
                            #kc.leaveGroup(receiver)
                            #ke.leaveGroup(receiver)							
                        except:
                            pass


                elif msg.text in ["‡πÅ‡∏ó‡∏Ñ on"]:
                    settings["detectMention"] = True
                    line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏ô‡πÅ‡∏ó‡∏Ñ \n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                
                elif msg.text in ["‡πÅ‡∏ó‡∏Ñ off"]:
                    settings["detectMention"] = False
                    line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏ô‡πÅ‡∏ó‡∏Ñ \n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    
                elif msg.text in ["‡πÄ‡∏ï‡∏∞‡πÅ‡∏ó‡∏Ñ on"]:
                    settings["kickMention"] = True
                    line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ï‡∏∞‡∏Ñ‡∏ô‡πÅ‡∏ó‡∏Ñ (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                
                elif msg.text in ["‡πÄ‡∏ï‡∏∞‡πÅ‡∏ó‡∏Ñ off"]:
                    settings["kickMention"] = False
                    line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ï‡∏∞‡∏Ñ‡∏ô‡πÅ‡∏ó‡∏Ñ (ÔΩ°‚óï‚Äø‚óïÔΩ°)")      
#============================                    
#               elif msg.text in [".‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"]:
#                   settings["aip"] = True
#                    line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏Å‡∏±‡∏ö‡∏ö‡∏≠‡∏ó‡∏ö‡∏¥‡∏ô  ^œâ^")
#                
#                elif msg.text in [".‡∏õ‡∏¥‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"]:
#                    settings["aip"] = False
#                    line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏Å‡∏±‡∏ö‡∏ö‡∏≠‡∏ó‡∏ö‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß ï‚Ä¢Ôªå‚Ä¢ î")
#                    
#                elif msg.text in [".‡πÄ‡∏õ‡∏¥‡∏î‡∏û‡∏π‡∏î"]:
#                    settings["api"] = True
#                    line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏öApi‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°")
#                
#                elif msg.text in [".‡∏õ‡∏¥‡∏î‡∏û‡∏π‡∏î"]:
#                    settings["api"] = False
#                    line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏öApi‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß")              
#==========================================                    
                elif text.lower() == 'tag2 on':
                    settings['potoMention'] = True
                    line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ñ‡∏ô‡πÅ‡∏ó‡πá‡∏Ñ\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                elif text.lower() == 'tag2 off':
                    settings['potoMention'] = False
                    line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ñ‡∏ô‡πÅ‡∏ó‡πá‡∏Ñ \n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")                    

                elif '‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ó‡∏Ñ: ' in msg.text:
                  if msg._from in admin:
                     spl = msg.text.replace('‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ó‡∏Ñ: ','')
                     if spl in [""," ","\n",None]:
                         line.sendMessage(msg.to, "‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                     else:
                         settings["Respontag"] = spl
                         line.sendMessage(msg.to, "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏Ñ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\n\n{}".format(str(spl)))


                elif '‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏≠‡∏Å: ' in msg.text:
                  if msg._from in admin:
                     spl = msg.text.replace('‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏≠‡∏Å: ','')
                     if spl in [""," ","\n",None]:
                         line.sendMessage(msg.to, "‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                     else:
                          settings["bye"] = spl
                          line.sendMessage(msg.to, "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡∏Å‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\n\n\n{}".format(str(spl)))

                elif '‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏Ç‡πâ‡∏≤: ' in msg.text:
                  if msg._from in admin:
                     spl = msg.text.replace('‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏Ç‡πâ‡∏≤: ','')
                     if spl in [""," ","\n",None]:
                         line.sendMessage(msg.to, "‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                     else:
                          settings["welcome"] = spl
                          line.sendMessage(msg.to, "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡∏Å‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\n\n\n{}".format(str(spl)))

                elif msg.text.lower().startswith("‡∏†‡∏≤‡∏û "):
                    sep = msg.text.split(" ")
                    textnya = msg.text.replace(sep[0] + " ","")
                    urlnya = "http://chart.apis.google.com/chart?chs=480x80&cht=p3&chtt=" + textnya + "&chts=FFFFFF,70&chf=bg,s,000000"
                    line.sendImageWithURL(msg.to, urlnya)

                elif text.lower() == '‡∏•‡∏ö‡∏£‡∏±‡∏ô':
                    gid = line.getGroupIdsInvited()
                    start = time.time()
                    for i in gid:
                        line.rejectGroupInvitation(i)
                    elapsed_time = time.time() - start
                    line.sendMessage(to, "‡∏•‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏ä‡∏¥‡∏ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    line.sendMessage(to, "‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: %s‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ" % (elapsed_time))						
						
                elif text.lower() == 'zt':
                    gs = line.getGroup(to)
                    targets = []
                    for g in gs.members:
                        if g.displayName in "":
                            targets.append(g.mid)
                    if targets == []:
                        line.sendMessage(to, "‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ô‡πÉ‡∏™‡πà‡∏£‡πà‡∏≠‡∏á‡∏´‡∏ô‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    else:
                        mc = ""
                        for target in targets:
                            mc += sendMessageWithMention(to,target) + "\n"
                        line.sendMessage(to, mc)
                elif text.lower() == 'zm':
                    gs = line.getGroup(to)
                    lists = []
                    for g in gs.members:
                        if g.displayName in "":
                            lists.append(g.mid)
                    if lists == []:
                        line.sendMessage(to, "‡πÑ‡∏°‡πà‡∏°‡∏µmid‡∏Ñ‡∏ô‡πÉ‡∏™‡πà‡∏£‡πà‡∏≠‡∏á‡∏´‡∏ô (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    else:
                        mc = ""
                        for mi_d in lists:
                            mc += "->" + mi_d + "\n"
                        line.sendMessage(to,mc)
                elif text.lower() == 'zc':
                    gs = line.getGroup(to)
                    lists = []
                    for g in gs.members:
                        if g.displayName in "":
                            lists.append(g.mid)
                    if lists == []:
                        line.sendMessage(to, "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ô‡πÉ‡∏™‡πà‡∏£‡πà‡∏≠‡∏á‡∏´‡∏ô‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    else:
                        for ls in lists:
                            contact = line.getContact(ls)
                            mi_d = contact.mid
                            line.sendContact(to, mi_d)
                elif "Spam " in msg.text:
                    txt = msg.text.split(" ")
                    jmlh = int(txt[2])
                    teks = msg.text.replace("Spam "+str(txt[1])+" "+str(jmlh)+" ","")
                    tulisan = jmlh * (teks+"\n")
                    if txt[1] == "on":
                        if jmlh <= 100000:
                           for x in range(jmlh):
                               line.sendMessage(msg.to, teks)
                        else:
                           line.sendMessage(msg.to, "Out of Range!")
                    elif txt[1] == "off":
                        if jmlh <= 100000:
                            line.sendMessage(msg.to, tulisan)
                        else:
                            line.sendMessage(msg.to, "Out Of Range!")
                            
                elif '‡∏•‡∏ö‡πÄ‡∏ä‡∏¥‡∏çS' in msg.text.lower():
                   if msg.toType == 2:
                       X = line.getGroup(msg.to)
                       if X.invitee is not None:
                           gInviMids = [contact.mid for contact in X.invitee]
                           line.cancelGroupInvitation(msg.to, gInviMids)
                       else:
                           if settings["lang"] == "JP":
                               line.sendMessage(msg.to,"‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏¥‡∏ç")
                           else:
                               line.sendMessage(msg.to,"‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ")
                   else:
                       if settings["lang"] == "JP":
                           line.sendMessage(msg.to,"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏ô‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÑ‡∏î‡πâ")
                       else:
                           line.sendMessage(msg.to,"‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°")

                elif '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å: ' in msg.text:
                  if msg._from in admin:
                     spl = msg.text.replace('‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å: ','')
                     if spl in [""," ","\n",None]:
                         line.sendMessage(msg.to, "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å")
                     else:
                          settings["Nn"] = spl
                          line.sendMessage(msg.to, "{}".format(str(spl)))
                elif '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤: ' in msg.text:
                  if msg._from in admin:
                     spl = msg.text.replace('‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤: ','')
                     if spl in [""," ","\n",None]:
                         line.sendMessage(msg.to, "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å")
                     else:
                          settings["Sd"] = spl
                          line.sendMessage(msg.to, "{}".format(str(spl)))

                elif msg.text in ["‡πÄ‡∏ä‡∏¥‡∏ç"]:
                        settings["winvite"] = True
                        line.sendMessage(msg.to,"‡∏™‡πà‡∏á‡∏Ñ‡∏≠‡∏ô‡πÅ‡∏ó‡∏Ñ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏¥‡∏ç\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")


                elif msg.text in ["‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏ö‡∏ô"]:
                    settings["blacklist"] = {}
                    line.sendMessage(msg.to,"‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏î‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    print ("Clear Ban")

                elif text.lower() == '‡∏ö‡∏±‡∏Å‡∏´‡∏≥':
                    if msg.toType == 2:
                        group = line.getGroup(to)
                        group.preventedJoinByTicket = False
                        line.updateGroup(group)
                        invsend = 0
                        ticket = line.reissueGroupTicket(to)
                        ki.acceptGroupInvitationByTicket(to,format(str(ticket)))
                        time.sleep(0.01)
                        kk.acceptGroupInvitationByTicket(to,format(str(ticket)))
                        time.sleep(0.01)
                        kc.acceptGroupInvitationByTicket(to,format(str(ticket)))
                        time.sleep(0.01)
                        ke.acceptGroupInvitationByTicket(to,format(str(ticket)))
                        time.sleep(0.01)                        
                        group.preventedJoinByTicket = True
                        line.updateGroup(group)
                        print ("‡∏Ñ‡∏•‡∏¥‡πâ‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤ ")

                elif '‡πÄ‡∏ï‡∏∞' in text.lower():
                       targets = []
                       key = eval(msg.contentMetadata["MENTION"])
                       key["MENTIONEES"] [0] ["M"]
                       for x in key["MENTIONEES"]:
                           targets.append(x["M"])
                       for target in targets:
                           try:
                               random.choice(Rfu).kickoutFromGroup(msg.to,[target])      
                               print ("‡πÄ‡∏ï‡∏∞‡∏Ñ‡∏ô")
                           except:
                               random.choice(Rfu).sendMessage(msg.to,"‡∏à‡∏≥‡∏Å‡∏±‡∏î")

                elif '‡∏ü‡∏±‡∏Å' in text.lower():
                       targets = []
                       key = eval(msg.contentMetadata["MENTION"])
                       key["MENTIONEES"] [0] ["M"]
                       for x in key["MENTIONEES"]:
                           targets.append(x["M"])
                       for target in targets:
                           try:
                               line.kickoutFromGroup(msg.to,[target])             
                               print ("‡πÄ‡∏ï‡∏∞‡∏Ñ‡∏ô1")
                           except:
                               line.sendMessage(msg.to,"‡∏à‡∏≥‡∏Å‡∏±‡∏î")                               

                elif '1 ' in text.lower():
                       targets = []
                       key = eval(msg.contentMetadata["MENTION"])
                       key["MENTIONEES"] [0] ["M"]
                       for x in key["MENTIONEES"]:
                           targets.append(x["M"])
                       for target in targets:
                           try:
                               ki.kickoutFromGroup(msg.to,[target])           
                               print ("‡∏Ñ‡∏•‡∏¥‡πâ‡∏Å1‡πÄ‡∏ï‡∏∞")
                           except:
                               ki.sendMessage(msg.to,"‡∏à‡∏≥‡∏Å‡∏±‡∏î")                               

                elif '2 ' in text.lower():
                       targets = []
                       key = eval(msg.contentMetadata["MENTION"])
                       key["MENTIONEES"] [0] ["M"]
                       for x in key["MENTIONEES"]:
                           targets.append(x["M"])
                       for target in targets:
                           try:
                               kk.kickoutFromGroup(msg.to,[target])
                               print ("‡∏Ñ‡∏•‡∏¥‡πâ‡∏Å2‡πÄ‡∏ï‡∏∞")
                           except:
                               kk.sendMessage(msg.to,"‡∏à‡∏≥‡∏Å‡∏±‡∏î")                              

                elif '3 ' in text.lower():
                       targets = []
                       key = eval(msg.contentMetadata["MENTION"])
                       key["MENTIONEES"] [0] ["M"]
                       for x in key["MENTIONEES"]:
                           targets.append(x["M"])
                       for target in targets:
                           try:
                               kc.kickoutFromGroup(msg.to,[target])
                               print ("‡∏Ñ‡∏•‡∏¥‡πâ‡∏Å3‡πÄ‡∏ï‡∏∞")
                           except:
                               kc.sendMessage(msg.to,"‡∏à‡∏≥‡∏Å‡∏±‡∏î")                              


                elif '‡πÄ‡∏ä‡∏¥‡∏ô' in text.lower():
                       targets = []
                       key = eval(msg.contentMetadata["MENTION"])
                       key["MENTIONEES"] [0] ["M"]
                       for x in key["MENTIONEES"]:
                           targets.append(x["M"])
                       for target in targets:
                           try:
                               line.inviteIntoGroup(msg.to,[target])
                               line.sendMessage(receiver, "‡πÄ‡∏ä‡∏¥‡∏çok")
                           except:
                               line.sendMessage(msg.to,"‡∏à‡∏≥‡∏Å‡∏±‡∏î ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏¥‡∏ç")

                elif '1‡πÄ‡∏ä‡∏¥‡∏ç' in text.lower():
                       targets = []
                       key = eval(msg.contentMetadata["MENTION"])
                       key["MENTIONEES"] [0] ["M"]
                       for x in key["MENTIONEES"]:
                           targets.append(x["M"])
                       for target in targets:
                           try:
                               ki.inviteIntoGroup(msg.to,[target])
                               ki.sendMessage(receiver, "‡πÄ‡∏ä‡∏¥‡∏çok")
                               print ("R1 invite User")
                           except:
                               ki.sendMessage(msg.to,"‡∏à‡∏≥‡∏Å‡∏±‡∏î ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏¥‡∏ç")                               

                elif '2‡πÄ‡∏ä‡∏¥‡∏ç' in text.lower():
                       targets = []
                       key = eval(msg.contentMetadata["MENTION"])
                       key["MENTIONEES"] [0] ["M"]
                       for x in key["MENTIONEES"]:
                           targets.append(x["M"])
                       for target in targets:
                           try:
                               kk.inviteIntoGroup(msg.to,[target])
                               kk.sendMessage(receiver, "‡πÄ‡∏ä‡∏¥‡∏çok")
                               ("R2 invite User")
                           except:
                               kk.sendMessage(msg.to,"‡∏à‡∏≥‡∏Å‡∏±‡∏î ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏¥‡∏ç")                               

                elif '3‡πÄ‡∏ä‡∏¥‡∏ç' in text.lower():
                       targets = []
                       key = eval(msg.contentMetadata["MENTION"])
                       key["MENTIONEES"] [0] ["M"]
                       for x in key["MENTIONEES"]:
                           targets.append(x["M"])
                       for target in targets:
                           try:
                               kc.inviteIntoGroup(msg.to,[target])
                               kc.sendMessage(receiver, "‡πÄ‡∏ä‡∏¥‡∏ç")
                               ("R3 invite User")
                           except:
                               kc.sendMessage(msg.to,"‡∏à‡∏≥‡∏Å‡∏±‡∏î ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏¥‡∏ç")                               
                elif "‡πÑ‡∏≠‡πâ‡∏´‡∏≥" in msg.text:
                	if msg.toType == 2:
                         _name = msg.text.replace("‡πÑ‡∏≠‡πâ‡∏´‡∏≥","")
                         gs = line.getGroup(receiver)
                         line.sendMessage(receiver,"Just some casual cleansing √¥")
                         targets = []
                         for g in gs.members:
                             if _name in g.displayName:
                                 targets.append(g.mid)
                         if targets == []:
                             line.sendMessage(receiver,"‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")
                         else:
                             for target in targets:
                             	if not target in Rfu:
                                     try:
                                         klist=[line,ki,kk,kc,ke]
                                         kicker=random.choice(klist)
                                         kicker.kickoutFromGroup(receiver,[target])
                                         print((receiver,[g.mid]))
                                     except:
                                         line.sendMessage(receiver,"Group cleanse")
                                         print ("Cleanse Group")

                elif msg.text in ["‡πÄ‡∏ï‡∏∞‡πÅ‡∏ö‡∏ô"]:
                	if msg.toType == 2:
                         group = line.getGroup(receiver)
                         gMembMids = [contact.mid for contact in group.members]
                         matched_list = []
                         for tag in settings["blacklist"]:
                             matched_list+=[str for str in gMembMids if str == tag]
                         if matched_list == []:
                             line.sendMessage(receiver,"‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏î‡∏≥\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                         else:
                             for jj in matched_list:
                                 try:
                                     klist=[line,ki,kk,kc,ke]
                                     kicker=random.choice(klist)
                                     kicker.kickoutFromGroup(receiver,[jj])
                                     print((receiver,[jj]))
                                 except:
                                     line.sendMessage(receiver,"(^‰∫∫^)")
                                     print ("‡πÑ‡∏•‡πà‡πÄ‡∏ï‡∏∞‡∏î‡∏≥")

                elif text.lower() == "‡∏•‡∏ö‡πÅ‡∏ä‡∏ó":
                        if msg._from in Family:
                            try:
                                line.removeAllMessages(op.param2)
                                kk.removeAllMessages(op.param2)
                                kc.removeAllMessages(op.param2)
                                ke.removeAllMessages(op.param2)                                
                                line.sendMessage(msg.to,"‡∏•‡∏ö‡πÅ‡∏ä‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ \n (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                            except:
                                pass
                                print ("‡∏•‡∏ö‡πÅ‡∏ä‡∏ó")

                elif text.lower() == "‡∏≠‡∏≠‡∏Å1":
                    if msg._from in Family:
                        ki.leaveGroup(msg.to)
                        kk.leaveGroup(msg.to)
                        kc.leaveGroup(msg.to)
                        ke.leaveGroup(msg.to)                        
                        print ("Kicker Leave")

                elif text.lower() == "‡∏≠‡∏≠‡∏Å‡πÅ‡∏ä‡∏ó‡∏£‡∏ß‡∏°":
                    if msg._from in Family:
                        gid = line.getGroupIdsJoined()
                        for i in gid:
                            ki.leaveGroup(i)
                            kk.leaveGroup(i)
                            kc.leaveGroup(i)
                            ke.leaveGroup(i)                            
                            print ("‡∏≠‡∏≠‡∏Å‡πÅ‡∏ä‡∏ó")

                elif "‡∏ä‡∏∑‡πà‡∏≠: " in text.lower():
                    if msg._from in Family:
                        proses = text.split(": ")
                        string = text.replace(proses[0] + ": ","")
                        profile_A = line.getProfile()
                        profile_A.displayName = string
                        line.updateProfile(profile_A)
                        line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß(ÔΩ°‚óï‚Äø‚óïÔΩ°)\n ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô  " + string)
                        print ("Update Name")

                elif "‡∏ï‡∏±‡∏™: " in msg.text.lower():
                    if msg._from in Family:
                        proses = text.split(": ")
                        string = text.replace(proses[0] + ": ","")
                        profile_A = line.getProfile()
                        profile_A.statusMessage = string
                        line.updateProfile(profile_A)
                        line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏±‡∏™‡πÅ‡∏•‡πâ‡∏ß (ÔΩ°‚óï‚Äø‚óïÔΩ°)\n ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô  " + string)
                        print ("Update Bio Succes")

                elif "‡∏Ñ‡∏•‡∏¥‡πâ‡∏Å: " in text.lower():
                    if msg._from in Family:
                        proses = text.split(": ")
                        string = text.replace(proses[0] + ": ","")
                        profile_A = ki.getProfile()
                        profile_B = kk.getProfile()
                        profile_C = kc.getProfile()
                        profile_D = ke.getProfile()                        
                        profile_A.displayName = string
                        profile_B.displayName = string
                        profile_C.displayName = string
                        profile_D.displayName = string                        
                        ki.updateProfile(profile_A)
                        kk.updateProfile(profile_B)
                        kc.updateProfile(profile_C)
                        ke.updateProfile(profile_D)                        
                        line.sendMessage(msg.to,"‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡πâ‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå ‡πÄ‡∏õ‡πá‡∏ô   " + string)
                        print ("Update Name All Kicker")

                elif "‡∏ï‡∏±‡∏™‡∏Ñ‡∏•‡∏¥‡πâ‡∏Å: " in text.lower():
                    if msg._from in Family:
                        proses = text.split(": ")
                        string = text.replace(proses[0] + ": ","")
                        profile_A = ki.getProfile()
                        profile_B = kk.getProfile()
                        profile_C = kc.getProfile()
                        profile_D = kc.getProfile()                        
                        profile_A.statusMessage = string
                        profile_B.statusMessage = string
                        profile_C.statusMessage = string
                        profile_D.statusMessage = string                        
                        ki.updateProfile(profile_A)
                        kk.updateProfile(profile_B)
                        kc.updateProfile(profile_C)
                        ke.updateProfile(profile_D)                        
                        line.sendMessage(msg.to,"Update Bio All Kicker to : " + string)
                        print ("Update Bio All Kicker")

                elif text.lower() == "‡∏ö‡∏±‡∏Å‡∏´‡∏≥‡∏°‡∏≤":
                    if msg._from in Family:
                        profile = ki.getProfile()
                        text = profile.displayName + ""
                        ki.sendMessage(to, text)                                
                        profile = kk.getProfile()
                        text = profile.displayName + ""
                        kk.sendMessage(to, text)                                
                        profile = kc.getProfile()
                        text = profile.displayName + ""
                        kc.sendMessage(to, text)
                        profile = ke.getProfile()                        
                        text = profile.displayName + ""
                        ke.sendMessage(to, text)                        
                        print ("‡∏™‡∏±‡πà‡∏á‡∏Ñ‡∏•‡∏¥‡πâ‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤")

  

#=============COMMAND PROTECT=========================#
                elif msg.text.lower() == '‡∏Å‡∏±‡∏ô‡∏•‡∏ö on':
                    if RfuProtect["protect"] == True:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Ñ \n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Ñ \n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    else:
                        RfuProtect["protect"] = True
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Ñ \n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Ñ \n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")

                elif msg.text.lower() == '‡∏Å‡∏±‡∏ô‡∏•‡∏ö off':
                    if RfuProtect["protect"] == False:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Ñ \n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Ñ \n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    else:
                        RfuProtect["protect"] = False
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Ñ \n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Ñ \n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")

                elif msg.text.lower() == '‡∏Å‡∏±‡∏ô‡∏¢‡∏Å on':
                    if RfuProtect["cancelprotect"] == True:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    else:
                        RfuProtect["cancelprotect"] = True
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")

                elif msg.text.lower() == '‡∏Å‡∏±‡∏ô‡∏¢‡∏Å off':
                    if RfuProtect["cancelprotect"] == False:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    else:
                        RfuProtect["cancelprotect"] = False
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")

                elif msg.text.lower() == '‡∏Å‡∏±‡∏ô‡πÄ‡∏ä‡∏¥‡∏ç on':
                    if RfuProtect["inviteprotect"] == True:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏ä‡∏¥‡∏ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏ä‡∏¥‡∏ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    else:
                        RfuProtect["inviteprotect"] = True
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏ä‡∏¥‡∏ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏ä‡∏¥‡∏ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")

                elif msg.text.lower() == '‡∏Å‡∏±‡∏ô‡πÄ‡∏ä‡∏¥‡∏ç off':
                    if RfuProtect["inviteprotect"] == False:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏ä‡∏¥‡∏ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏ä‡∏¥‡∏ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    else:
                        RfuProtect["inviteprotect"] = False
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏ä‡∏¥‡∏ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏ä‡∏¥‡∏ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")

                elif msg.text.lower() == '‡∏Å‡∏±‡∏ô‡∏•‡∏¥‡πâ‡∏á on':
                    if RfuProtect["linkprotect"] == True:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏•‡∏¥‡πâ‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏•‡∏¥‡πâ‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    else:
                        RfuProtect["linkprotect"] = True
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏•‡∏¥‡πâ‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏•‡∏¥‡πâ‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")

                elif msg.text.lower() == '‡∏Å‡∏±‡∏ô‡∏•‡∏¥‡πâ‡∏á off':
                    if RfuProtect["linkprotect"] == False:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏•‡∏¥‡πâ‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏•‡∏¥‡πâ‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    else:
                        RfuProtect["linkprotect"] = False
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏•‡∏¥‡πâ‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏•‡∏¥‡πâ‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")

                elif msg.text.lower() == '‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô on':
                    if RfuProtect["Protectguest"] == True:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    else:
                        RfuProtect["Protectguest"] = True
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô (ÔΩ°‚óï‚Äø‚óïÔΩ°)")

                elif msg.text.lower() == '‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô off':
                    if RfuProtect["Protectguest"] == False:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    else:
                        RfuProtect["Protectguest"] = False
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô (ÔΩ°‚óï‚Äø‚óïÔΩ°)")

                elif msg.text.lower() == '‡∏Å‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤ on':
                    if RfuProtect["Protectjoin"] == True:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    else:
                        RfuProtect["Protectjoin"] = True
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")

                elif msg.text.lower() == '‡∏Å‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤ off':
                    if RfuProtect["Protectjoin"] == False:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    else:
                        RfuProtect["Protectjoin"] = False
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")

                elif msg.text.lower() == '‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô':
                    if RfuProtect["inviteprotect"] == True:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    else:
                        RfuProtect["inviteprotect"] = True
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏ä‡∏¥‡∏ç‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    if RfuProtect["cancelprotect"] == True:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    else:
                        RfuProtect["cancelprotect"] = True
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    if RfuProtect["protect"] == True:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å \n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å \n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    else:
                        RfuProtect["protect"] = True
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    if RfuProtect["linkprotect"] == True:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏•‡∏¥‡πâ‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏•‡∏¥‡πâ‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    else:
                        RfuProtect["linkprotect"] = True
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏•‡∏¥‡πâ‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏•‡∏¥‡πâ‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    if RfuProtect["Protectguest"] == True:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    else:
                        RfuProtect["Protectguest"] = True
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    if RfuProtect["Protectjoin"] == True:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    else:
                        RfuProtect["Protectjoin"] = True
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")

                elif msg.text.lower() == '‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô':
                    if RfuProtect["inviteprotect"] == False:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    else:
                        RfuProtect["inviteprotect"] = False
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏ä‡∏¥‡∏ç‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏° (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    if RfuProtect["cancelprotect"] == False:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏¢‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏° (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏¢‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    else:
                        RfuProtect["cancelprotect"] = False
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏¢‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    if RfuProtect["protect"] == False:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏° (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏° (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    else:
                        RfuProtect["protect"] = False
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏° (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏° (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    if RfuProtect["linkprotect"] == False:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡πâ‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏° (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡πâ‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏° (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    else:
                        RfuProtect["linkprotect"] = False
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡πâ‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏° (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡πâ‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏° (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    if RfuProtect["Protectguest"] == False:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    else:
                        RfuProtect["Protectguest"] = False
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    if RfuProtect["Protectjoin"] == False:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ô‡∏ô‡∏≠‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏° (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ô‡∏ô‡∏≠‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏° (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    else:
                        RfuProtect["Protectjoin"] = False
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ô‡∏ô‡∏≠‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏° (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ô‡∏ô‡∏≠‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏° (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
#==============FINNISHING PROTECT========================#
                elif msg.text.lower() == '‡πÄ‡∏õ‡∏¥‡∏î‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤':
                        if settings["Nn"] == True:
                            if settings["lang"] == "JP":
                                line.sendMessage(to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            settings["Nn"] = True
                            if settings["lang"] == "JP":
                                line.sendMessage(to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                elif msg.text.lower() == '‡∏õ‡∏¥‡∏î‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤':
                        if settings["Nn"] == False:
                            if settings["lang"] == "JP":
                                line.sendMessage(to,"‡∏õ‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            settings["Nn"] = False
                            if settings["Nn"] == "JP":
                                line.sendMessage(to,"‡∏õ‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")

                elif msg.text.lower() == '‡πÄ‡∏õ‡∏¥‡∏î‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å':
                        if settings["Sd"] == True:
                            if settings["lang"] == "JP":
                                line.sendMessage(to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            settings["Sd"] = True
                            if settings["lang"] == "JP":
                                line.sendMessage(to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                elif msg.text.lower() == '‡∏õ‡∏¥‡∏î‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å':
                        if settings["Sd"] == False:
                            if settings["lang"] == "JP":
                                line.sendMessage(to,"‡∏õ‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        else:
                            settings["Sd"] = False
                            if settings["lang"] == "JP":
                                line.sendMessage(to,"‡∏õ‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å\n(ÔΩ°‚óï‚Äø‚óïÔΩ°)")

                elif text.lower() == '1‡∏•‡∏ö‡∏£‡∏±‡∏ô':
                    gid = line.getGroupIdsInvited()
                    start = time.time()
                    for i in gid:
                        line.rejectGroupInvitation(i)
                    elapsed_time = time.time() - start
                    line.sendMessage(to, "‡∏•‡∏ö‡∏£‡∏±‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                    line.sendMessage(to, "‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: %s‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ" % (elapsed_time))								
								
                elif "Allban" in msg.text:
                  if msg._from in Family:
                      if msg.toType == 2:
                           print ("All Banlist")
                           _name = msg.text.replace("Allban","")
                           gs = line.getGroup(msg.to)
                           line.sendMessage(msg.to,"Banned all")
                           targets = []
                           for g in gs.members:
                               if _name in g.displayName:
                                    targets.append(g.mid)
                           if targets == []:
                                line.sendMessage(msg.to,"‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î !")
                           else:
                               for target in targets:
                                   if not target in Family:
                                       try:
                                           settings["blacklist"][target] = True
                                           f=codecs.open('st2__b.json','w','utf-8')
                                           json.dump(settings["blacklist"], f, sort_keys=True, indent=4,ensure_ascii=False)
                                       except:
                                           line.sentMessage(msg.to,"‡πÅ‡∏ö‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
										   
                elif 'ban' in text.lower():
                       targets = []
                       key = eval(msg.contentMetadata["MENTION"])
                       key["MENTIONEES"] [0] ["M"]
                       for x in key["MENTIONEES"]:
                           targets.append(x["M"])
                       for target in targets:
                           try:
                               settings["blacklist"][target] = True
                               f=codecs.open('st2__b.json','w','utf-8')
                               json.dump(settings["blacklist"], f, sort_keys=True, indent=4,ensure_ascii=False)
                               line.sendMessage(msg.to,"‡πÅ‡∏ö‡∏ô‡∏ú‡∏π‡πâ‡πÑ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                               print ("Banned User")
                           except:
                               line.sendMessage(msg.to,"‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î !")

                elif 'unban' in text.lower():
                       targets = []
                       key = eval(msg.contentMetadata["MENTION"])
                       key["MENTIONEES"] [0] ["M"]
                       for x in key["MENTIONEES"]:
                           targets.append(x["M"])
                       for target in targets:
                           try:
                               del settings["blacklist"][target]
                               f=codecs.open('st2__b.json','w','utf-8')
                               json.dump(settings["blacklist"], f, sort_keys=True, indent=4,ensure_ascii=False)
                               line.sendMessage(msg.to,"‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏ö‡∏ô ‡∏ú‡∏π‡πâ‡πÑ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                               print ("Unbanned User")
                           except:
                               line.sendMessage(msg.to,"‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î !")

                elif msg.text in ["‡πÄ‡∏ä‡πá‡∏Ñ‡πÅ‡∏ö‡∏ô"]:
                  if msg._from in Family:
                    if settings["blacklist"] == {}:
                        line.sendMessage(msg.to,"‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÑ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡πÅ‡∏ö‡∏ô (ÔΩ°‚óï‚Äø‚óïÔΩ°)") 
                    else:
                        line.sendMessage(msg.to,"‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÑ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡πÅ‡∏ö‡∏ô (ÔΩ°‚óï‚Äø‚óïÔΩ°)")
                        mc = "‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ (ÔΩ°‚óï‚Äø‚óïÔΩ°)\n"
                        for mi_d in settings["blacklist"]:
                            mc += "‚û† " + line.getContact(mi_d).displayName + " \n"
                        line.sendMessage(msg.to, mc + "")

                elif msg.text.lower().startswith("urban "):
                    sep = msg.text.split(" ")
                    judul = msg.text.replace(sep[0] + " ","")
                    url = "http://api.urbandictionary.com/v0/define?term="+str(judul)
                    with requests.session() as s:
                        s.headers["User-Agent"] = random.choice(settings["userAgent"])
                        r = s.get(url)
                        data = r.text
                        data = json.loads(data)
                        y = "[ Result Urban ]"
                        y += "\nTags: "+ data["tags"][0]
                        y += ","+ data["tags"][1]
                        y += ","+ data["tags"][2]
                        y += ","+ data["tags"][3]
                        y += ","+ data["tags"][4]
                        y += ","+ data["tags"][5]
                        y += ","+ data["tags"][6]
                        y += ","+ data["tags"][7]
                        y += "\n[1]\nAuthor: "+str(data["list"][0]["author"])
                        y += "\nWord: "+str(data["list"][0]["word"])
                        y += "\nLink: "+str(data["list"][0]["permalink"])
                        y += "\nDefinition: "+str(data["list"][0]["definition"])
                        y += "\nExample: "+str(data["list"][0]["example"])
                        line.sendMessage(to, str(y))
            elif msg.contentType == 7:
                if settings["checkSticker"] == True:
                    stk_id = msg.contentMetadata['STKID']
                    stk_ver = msg.contentMetadata['STKVER']
                    pkg_id = msg.contentMetadata['STKPKGID']
                    ret_ = "VƒÖ≈Åƒ∑·ª≥≈óƒØ√® —Ç—îŒ¨–º “£Œ¨ƒâ—ú"
                    ret_ += "\n‡∏™‡∏ï‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå ID : {}".format(stk_id)
                    ret_ += "\n‡∏™‡∏ï‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå PACKAGES ID : {}".format(pkg_id)
                    ret_ += "\n‡∏™‡∏ï‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå VERSION : {}".format(stk_ver)
                    ret_ += "\n‡∏™‡∏ï‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå URL : line://shop/detail/{}".format(pkg_id)
                    ret_ += "\n    ≈ö·∫æL‚Ç£–íŒå≈¶ L√ç≈á·ªÄ"
                    line.sendMessage(to, str(ret_))
                    
#=========================================                                          
#            if msg.text in ["Speed","speed","Sp","sp"]:
#            	line.sendMessage(to,"‡πÑ‡∏ß‡∏à‡∏±‡∏î‡πÄ‡∏•‡∏¢‡∏•‡∏π‡∏Å‡∏û‡∏µ‡πàüòÅ\n‡πÄ‡∏î‡∏≠‡∏∞‡∏ü‡∏≤‡∏™‡∏°‡∏≤‡πÄ‡∏≠‡∏áüöó")
#            if msg.text in ["Me","me","‡∏Ñ‡∏ó"]:
 #           	line.sendMessage(to, "‡πÄ‡∏ä‡∏Ñ‡∏ó‡∏≥‡πÑ‡∏°‡∏Å‡∏•‡∏±‡∏ß‡∏ö‡∏≠‡∏ó‡∏´‡∏•‡∏∏‡∏î‡∏£‡∏∂üòÅ")
#            if msg.text in ["."]:
#            	line.sendMessage(to,"SELFBOT ‚û†‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‚úî ")
#            if msg.text in ["‡∏Å‡∏≥","‡∏Å‡∏≥‡∏ô‡∏∞"]:
#            	line.sendMessage(to,"‡∏Å‡∏≥‡∏´‡∏µüòÅ\n‡∏Å‡∏≥‡∏ô‡∏°üòÅ")
#            if msg.text in ["‡∏≠‡∏≠‡∏ô‡∏õ‡πà‡∏≤‡∏ß"]:
#            	line.sendMessage(to,"‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô")
#            if msg.text in ["‡πÄ‡∏à‡πâ"]:
#            	line.sendMessage(to, "‡πÄ‡∏à‡πâ‡∏î‡∏π‡∏î‡∏°‡πâ‡∏≤üòÅ\n‡∏™‡πà‡∏á‡∏Ñ‡∏•‡∏¥‡∏õüòÅ\n‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô‡∏ä‡∏≤\n55555555")
#            if msg.text in ["555","5555","55555"]:
#            	line.sendMessage(to,"‡∏Ç‡∏≥‡∏Ç‡∏ô‡∏≤‡∏î‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡∏Ç‡∏µ‡πâ‡πÄ‡∏ñ‡∏≠‡∏∞üòÇ ")
#            if msg.text in ["‡∏á‡∏¥","‡∏á‡∏¥‡∏á‡∏¥"]:
#            	line.sendMessage(to,"‡∏á‡∏¥‡πÑ‡∏£ ‡∏°‡∏∂‡∏á‡∏£‡∏∏‡πâ‡∏à‡∏±‡∏Å‡πÑ‡∏≠‡∏ï‡πà‡∏≤‡∏¢‡∏õ‡πà‡∏∞üòÅ")
            #if msg.text in ["‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö‡∏ú‡∏™","‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö‡∏ú‡∏™."]:
            	#nadya.sendMessage(to,"Hi Creator üòÅ‚Ñ¢œâ‡∏π‡πâ„Åñ·Äî‡πâ◊ì‡•≠‚ù∏‚û£‚ùç„Åñ‡∏π‡∫Æ‚Ñì◊û’Å‡Æû‡¶£")
            #if msg.text in ["‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"]:
            #	nadya.sendMessage(to,"‡πÄ‡∏ä‡πá‡∏Ñ")
                #nadya.sendMessage(to,"‡πÄ‡∏ä‡πá‡∏Ñ2")                    
              
#==============================================================================#
        if op.type == 19:
          if op.param2 in Family:
            pass
          if op.param2 in RfuBot:
          	pass
          else:
            if op.param3 in lineMID:
              if op.param2 not in Family:
                try:
                  G = ki.getGroup(op.param1)
                  G = kk.getGroup(op.param1)
                  ki.kickoutFromGroup(op.param1,[op.param2])
                  G.preventedJoinByTicket = False
                  kk.updateGroup(G)
                  ticket = kk.reissueGroupTicket(op.param1)
                  line.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  ki.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  kk.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  kc.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  ke.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)                  
                  G.preventedJoinByTicket = True
                  line.updateGroup(G)
                  settings["blacklist"][op.param2] = True
                  f=codecs.open('st2__b.json','w','utf-8')
                  json.dump(settings["blacklist"], f, sort_keys=True, indent=4,ensure_ascii=False)
                except:
                  G = random.choice(Rfu).getGroup(op.param1)
                  random.choice(Rfu).kickoutFromGroup(op.param1,[op.param2])
                  G.preventedJoinByTicket = False
                  random.choice(Rfu).updateGroup(G)
                  ticket = random.choice(Rfu).reissueGroupTicket(op.param1)
                  line.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  ki.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  kk.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  kc.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  ke.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)                  
                  G.preventedJoinByTicket = True
                  random.choice(Rfu).updateGroup(G)
                  settings["blacklist"][op.param2] = True
                  f=codecs.open('st2__b.json','w','utf-8')
                  json.dump(settings["blacklist"], f, sort_keys=True, indent=4,ensure_ascii=False)

            if op.param3 in kiMID:
              if op.param2 not in Family:
                try:
                  G = kk.getGroup(op.param1)
                  G = kc.getGroup(op.param1)
                  kk.kickoutFromGroup(op.param1,[op.param2])
                  G.preventedJoinByTicket = False
                  kc.updateGroup(G)
                  ticket = kc.reissueGroupTicket(op.param1)
                  ki.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  line.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  kk.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  kc.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  ke.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)                  
                  G.preventedJoinByTicket = True
                  kk.updateGroup(G)
                  settings["blacklist"][op.param2] = True
                  f=codecs.open('st2__b.json','w','utf-8')
                  json.dump(settings["blacklist"], f, sort_keys=True, indent=4,ensure_ascii=False)
                except:
                  G = random.choice(Rfu).getGroup(op.param1) 
                  random.choice(Rfu).kickoutFromGroup(op.param1,[op.param2])
                  G.preventedJoinByTicket = False
                  kk.updateGroup(G)
                  ticket = random.choice(Rfu).reissueGroupTicket(op.param1)
                  ki.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  line.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  kk.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  kc.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  G.preventedJoinByTicket = True
                  ki.updateGroup(G)
                  settings["blacklist"][op.param2] = True
                  f=codecs.open('st2__b.json','w','utf-8')
                  json.dump(settings["blacklist"], f, sort_keys=True, indent=4,ensure_ascii=False)
                  
            if op.param3 in kkMID:
              if op.param2 not in Family:
                try:
                  G = kc.getGroup(op.param1)
                  G = ki.getGroup(op.param1)
                  kc.kickoutFromGroup(op.param1,[op.param2])
                  G.preventedJoinByTicket = False
                  kc.updateGroup(G)
                  ticket = ki.reissueGroupTicket(op.param1)
                  kk.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  G.preventedJoinByTicket = True
                  kk.updateGroup(G)
                  settings["blacklist"][op.param2] = True
                  f=codecs.open('st2__b.json','w','utf-8')
                  json.dump(settings["blacklist"], f, sort_keys=True, indent=4,ensure_ascii=False)
                except:
                  G = random.choice(Rfu).getGroup(op.param1)
                  random.choice(Rfu).kickoutFromGroup(op.param1,[op.param2])
                  G.preventedJoinByTicket = False
                  random.choice(Rfu).updateGroup(G)
                  ticket = random.choice(Rfu).reissueGroupTicket(op.param1)
                  kk.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  G.preventedJoinByTicket = True
                  random.choice(Rfu).updateGroup(G)
                  settings["blacklist"][op.param2] = True
                  f=codecs.open('st2__b.json','w','utf-8')
                  json.dump(settings["blacklist"], f, sort_keys=True, indent=4,ensure_ascii=False)
                  
            if op.param3 in kcMID:
              if op.param2 not in Family:
                try:
                  G = kk.getGroup(op.param1)
                  G = ke.getGroup(op.param1)
                  ki.kickoutFromGroup(op.param1,[op.param2])
                  G.preventedJoinByTicket = False
                  ki.updateGroup(G)
                  ticket = ki.reissueGroupTicket(op.param1)
                  kc.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  G.preventedJoinByTicket = True
                  kc.updateGroup(G)
                  settings["blacklist"][op.param2] = True
                  f=codecs.open('st2__b.json','w','utf-8')
                  json.dump(settings["blacklist"], f, sort_keys=True, indent=4,ensure_ascii=False)
                except:
                  G = random.choice(Rfu).getGroup(op.param1) 
                  random.choice(Rfu).kickoutFromGroup(op.param1,[op.param2])
                  G.preventedJoinByTicket = False
                  random.choice(Rfu).updateGroup(G)
                  ticket = random.choice(Rfu).reissueGroupTicket(op.param1)
                  kc.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  G.preventedJoinByTicket = True
                  random.choice(Rfu).updateGroup(G)
                  settings["blacklist"][op.param2] = True
                  f=codecs.open('st2__b.json','w','utf-8')
                  json.dump(settings["blacklist"], f, sort_keys=True, indent=4,ensure_ascii=False)

            if op.param3 in keMID:
              if op.param2 not in Family:
                try:
                  G = ki.getGroup(op.param1)
                  G = kc.getGroup(op.param1)
                  ki.kickoutFromGroup(op.param1,[op.param2])
                  G.preventedJoinByTicket = False
                  ki.updateGroup(G)
                  ticket = ki.reissueGroupTicket(op.param1)
                  ke.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  G.preventedJoinByTicket = True
                  ke.updateGroup(G)
                  settings["blacklist"][op.param2] = True
                  f=codecs.open('st2__b.json','w','utf-8')
                  json.dump(settings["blacklist"], f, sort_keys=True, indent=4,ensure_ascii=False)
                except:
                  G = random.choice(Rfu).getGroup(op.param1) 
                  random.choice(Rfu).kickoutFromGroup(op.param1,[op.param2])
                  G.preventedJoinByTicket = False
                  random.choice(Rfu).updateGroup(G)
                  ticket = random.choice(Rfu).reissueGroupTicket(op.param1)
                  ke.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  G.preventedJoinByTicket = True
                  random.choice(Rfu).updateGroup(G)
                  settings["blacklist"][op.param2] = True
                  f=codecs.open('st2__b.json','w','utf-8')
                  json.dump(settings["blacklist"], f, sort_keys=True, indent=4,ensure_ascii=False)                  

        if op.type == 19:
            if lineMID in op.param3:
                settings["blacklist"][op.param2] = True
        if op.type == 22:
            if settings['leaveRoom'] == True:
                line.leaveRoom(op.param1)
                ki.leaveRoom(op.param1)
                kk.leaveRoom(op.param1)
                kc.leaveRoom(op.param1)
                ke.leaveRoom(op.param1)                
        if op.type == 24:
            if settings['leaveRoom'] == True:
                line.leaveRoom(op.param1)
                ki.leaveRoom(op.param1)
                kk.leaveRoom(op.param1)
                kc.leaveRoom(op.param1)
                ke.leaveRoom(op.param1)                
#==============================================================================#
        if op.type == 19:
            try:
                if op.param3 in lineMID:
                    if op.param2 in kiMID:
                        G = ki.getGroup(op.param1)
                        G.preventedJoinByTicket = False
                        ki.updateGroup(G)
                        ticket = ki.reissueGroupTicket(op.param1)
                        line.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        ki.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        kk.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        kc.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        ke.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)						
                        G.preventedJoinByTicket = True
                        line.updateGroup(G)
                    else:
                        G = ki.getGroup(op.param1)                                                
                        random.choice(Rfu).kickoutFromGroup(op.param1,[op.param2])
                        G.preventedJoinByTicket = False
                        ki.updateGroup(G)
                        ticket = ki.reissueGroupTicket(op.param1)
                        line.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        ki.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        kk.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        kc.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        ke.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)						
                        G.preventedJoinByTicket = True
                        ki.updateGroup(G)
                        settings["blacklist"][op.param2] = True                       

                elif op.param3 in kiMID:
                    if op.param2 in lineMID:
                        G = kk.getGroup(op.param1)
                        G.preventedJoinByTicket = False
                        kk.updateGroup(G)
                        ticket = kk.reissueGroupTicket(op.param1)
                        line.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        ki.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        kk.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        kc.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        ke.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)						
                        G.preventedJoinByTicket = True
                        kk.updateGroup(G)
                    else:
                        G = kk.getGroup(op.param1)
                        random.choice(Rfu).kickoutFromGroup(op.param1,[op.param2])
                        G.preventedJoinByTicket = False
                        kk.updateGroup(G)
                        ticket = kk.reissueGroupTicket(op.param1)
                        line.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        ki.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        kk.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        kc.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        ke.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)						
                        G.preventedJoinByTicket = True
                        ki.updateGroup(G)
                        settings["blacklist"][op.param2] = True

                elif op.param3 in kkMID:
                    if op.param2 in kiMID:
                        G = ki.getGroup(op.param1)
                        G.preventedJoinByTicket = False
                        ki.updateGroup(G)
                        ticket = ki.reissueGroupTicket(op.param1)
                        kk.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        line.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        ki.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        kc.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        ke.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)						
                        G.preventedJoinByTicket = True
                        ki.updateGroup(G)
                    else:
                        G = ki.getGroup(op.param1)
                        random.choice(Rfu).kickoutFromGroup(op.param1,[op.param2])
                        G.preventedJoinByTicket = False
                        ki.updateGroup(G)
                        ticket = ki.reissueGroupTicket(op.param1)
                        kk.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        line.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        ki.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        kc.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        G.preventedJoinByTicket = True
                        ki.updateGroup(G)
                        settings["blacklist"][op.param2] = True

                elif op.param3 in kcMID:
                    if op.param2 in kkMID:
                        G = kk.getGroup(op.param1)
                        G.preventedJoinByTicket = False
                        kk.updateGroup(G)
                        ticket = kk.reissueGroupTicket(op.param1)
                        kc.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        line.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        ki.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        kk.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        ke.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)						
                        G.preventedJoinByTicket = True
                        kk.updateGroup(G)
                    else:
                        G = kk.getGroup(op.param1)
                        random.choice(Rfu).kickoutFromGroup(op.param1,[op.param2])
                        G.preventedJoinByTicket = False
                        kk.updateGroup(G)
                        ticket = kk.reissueGroupTicket(op.param1)
                        kc.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        line.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        ki.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        kk.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        ke.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)						
                        G.preventedJoinByTicket = True
                        kc.updateGroup(G)
                        settings["blacklist"][op.param2] = True
                elif op.param3 in keMID:
                    if op.param2 in kcMID:
                        G = ke.getGroup(op.param1)
                        G.preventedJoinByTicket = False
                        ke.updateGroup(G)
                        ticket = ke.reissueGroupTicket(op.param1)
                        kc.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        line.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        ki.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        kk.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        ke.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)						
                        G.preventedJoinByTicket = True
                        kc.updateGroup(G)
                    else:
                        G = ke.getGroup(op.param1)
                        random.choice(Rfu).kickoutFromGroup(op.param1,[op.param2])
                        G.preventedJoinByTicket = False
                        ke.updateGroup(G)
                        ticket = ke.reissueGroupTicket(op.param1)
                        kc.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        line.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        ki.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        kk.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        ke.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)						
                        G.preventedJoinByTicket = True
                        ke.updateGroup(G)
                        settings["blacklist"][op.param2] = True
            except:
                pass
#==============================================================================#
        if op.type == 17:
            if op.param2 not in Family:
                if op.param2 in Family:
                    pass
            if RfuProtect["protect"] == True:
                if settings["blacklist"][op.param2] == True:
                    try:
                        line.kickoutFromGroup(op.param1,[op.param2])
                        G = line.getGroup(op.param1)
                        G.preventedJoinByTicket = True
                        line.updateGroup(G)
                    except:
                        try:
                            line.kickoutFromGroup(op.param1,[op.param2])
                            G = line.getGroup(op.param1)
                            G.preventedJoinByTicket = True
                            line.updateGroup(G)
                        except:
                            pass
        if op.type == 19:
            if op.param2 not in Family:
                if op.param2 in Family:
                    pass
                elif RfuProtect["protect"] == True:
                    settings ["blacklist"][op.param2] = True
                    random.choice(Rfu).kickoutFromGroup(op.param1,[op.param2])
                    random.choice(Rfu).inviteIntoGroup(op.param1,[op.param2])

        if op.type == 13:
            if op.param2 not in Family:
                if op.param2 in Family:
                    pass
                elif RfuProtect["inviteprotect"] == True:
                    settings ["blacklist"][op.param2] = True
                    random.choice(Rfu).cancelGroupInvitation(op.param1,[op.param3])
                    random.choice(Rfu).kickoutFromGroup(op.param1,[op.param2])
                    if op.param2 not in Family:
                        if op.param2 in Family:
                            pass
                        elif RfuProtect["inviteprotect"] == True:
                            settings ["blacklist"][op.param2] = True
                            random.choice(Rfu).cancelGroupInvitation(op.param1,[op.param3])
                            random.choice(Rfu).kickoutFromGroup(op.param1,[op.param2])
                            if op.param2 not in Family:
                                if op.param2 in Family:
                                    pass
                                elif RfuProtect["cancelprotect"] == True:
                                    settings ["blacklist"][op.param2] = True
                                    random.choice(Rfu).cancelGroupInvitation(op.param1,[op.param3])
                                    
#============================                  
        if op.type == 17:
            if op.param2 in settings["blacklist"] == {}:
                line.kickoutFromGroup(op.param1,[op.param2])
                now2 = datetime.datetime.now()
                nowT = datetime.datetime.strftime(now2,"%H")
                nowM = datetime.datetime.strftime(now2,"%M")
                nowS = datetime.datetime.strftime(now2,"%S")
                tm = "\n\n"+nowT+":"+nowM+":"+nowS
                line.sendText(op.param1,"‡∏ú‡∏π‡πâ‡πÑ‡∏ä‡πâ‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÅ‡∏ö‡∏ô‡∏•‡∏¥‡∏™ (ÔΩ°‚óï‚Äø‚óïÔΩ°)"+tm)                                    

        if op.type == 11:
            if op.param2 not in Family:
                if op.param2 in Family:
                    pass
                elif RfuProtect["linkprotect"] == True:
                    settings ["blacklist"][op.param2] = True
                    G = line.getGroup(op.param1)
                    G.preventedJoinByTicket = True
                    line.updateGroup(G)
                    random.choice(Rfu).kickoutFromGroup(op.param1,[op.param2])
        if op.type == 5:
            if RfuProtect["autoAdd"] == True:
                if (settings["message"] in [""," ","\n",None]):
                    pass
                else:
                    line.sendMessage(op.param1,str(settings["message"]))

        if op.type == 11:
            if RfuProtect["linkprotect"] == True:
                if op.param2 not in Family:
                    G = line.getGroup(op.param1)
                    G.preventedJoinByTicket = True
                    random.choice(Rfu).updateGroup(G)
                    random.choice(Rfu).kickoutFromGroup(op.param1,[op.param3])                    

        if op.type == 13:
           if RfuProtect["Protectguest"] == True:
               if op.param2 not in Family:
                  random.choice(Rfu).cancelGroupInvitation(op.param1,[op.param3])
                  random.choice(Rfu).kickoutFromGroup(op.param1,[op.param2])

        if op.type == 17:
           if RfuProtect["Protectjoin"] == True:
               if op.param2 not in Family:
                   random.choice(Rfu).kickoutFromGroup(op.param1,[op.param2])

        if op.type == 1:
            if sender in Setmain["foto"]:
                path = line.downloadObjectMsg(msg_id)
                del Setmain["foto"][sender]
                line.updateProfilePicture(path)
                line.sendMessage(to,"‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

        if op.type == 26:
            msg = op.message
            text = msg.text
            msg_id = msg.id
            receiver = msg.to
            sender = msg._from
            if msg.toType == 0:
                if sender != line.profile.mid:
                    to = sender
                else:
                    to = receiver
            else:
                to = receiver
                if settings["autoRead"] == True:
                    line.sendChatChecked(to, msg_id)
                    ki.sendChatChecked(to, msg_id)
                    kk.sendChatChecked(to, msg_id)
                    kc.sendChatChecked(to, msg_id)
                    ke.sendChatChecked(to, msg_id)					
                if to in read["readPoint"]:
                    if sender not in read["ROM"][to]:
                        read["ROM"][to][sender] = True
                if sender in settings["mimic"]["target"] and settings["mimic"]["status"] == True and settings["mimic"]["target"][sender] == True:
                    text = msg.text
                    if text is not None:
                        line.sendMessage(msg.to,text)
                        
#============================================                                     
                if msg.contentType == 0 and sender not in lineMID and msg.toType == 2:
                    if "MENTION" in list(msg.contentMetadata.keys())!= None:
                        if settings['potoMention'] == True:
                             contact = line.getContact(msg._from)
                             cName = contact.pictureStatus
                             balas = ["http://dl.profile.line-cdn.net/" + cName]
                             ret_ = random.choice(balas)
                             mention = ast.literal_eval(msg.contentMetadata["MENTION"])
                             mentionees = mention["MENTIONEES"]
                             for mention in mentionees:
                                   if mention["M"] in lineMID:
                                          line.sendImageWithURL(to,ret_)
                                          break                        

                if msg.contentType == 0 and sender not in lineMID and msg.toType == 2:
                    if "MENTION" in list(msg.contentMetadata.keys()) != None:
                         if settings['detectMention'] == True:
                             contact = line.getContact(msg._from)
                             cName = contact.displayName
                             balas = ["„Äê„Åï‡∏±‡¶èœÄ‡∏±‡Æû‚úµ‡∫ö‡∏¥‡§•‚Ñì‚Ñì“®‡§§Œ©„Äë\n " + cName ]
                             ret_ = "" + random.choice(balas)
                             name = re.findall(r'@(\w+)', msg.text)
                             mention = ast.literal_eval(msg.contentMetadata["MENTION"])
                             mentionees = mention['MENTIONEES']
                             for mention in mentionees:
                                   if mention['M'] in lineMID:
                                          line.sendMessage(to,ret_)
                                          line.sendMessage(to,str(settings["Respontag"]))
                                          #sendMessageWithMention(to, contact.mid)
                                          line.sendMessage(msg.to, None, contentMetadata={"STKID":"16463699","STKPKGID":"1431756","STKVER":"10"}, contentType=7)
                                          break




        if op.type == 17:
           print ("MEMBER JOIN TO GROUP")
           if settings["Sd"] == True:
             if op.param2 in lineMID:
                 return
             ginfo = line.getGroup(op.param1)
             contact = line.getContact(op.param2)
             image = "http://dl.profile.line.naver.jp/" + contact.pictureStatus
             line.sendMessage(op.param1,str(settings["welcome"]))
             line.sendImageWithURL(op.param1,image)
        if op.type == 15:
           print ("MEMBER LEAVE TO GROUP")
           if settings["Nn"] == True:
             if op.param2 in lineMID:
                 return
             ginfo = line.getGroup(op.param1)
             contact = line.getContact(op.param2)
             image = "http://dl.profile.line.naver.jp/" + contact.pictureStatus
             line.sendImageWithURL(op.param1,image)
             line.sendMessage(op.param1,str(settings["bye"]) + "\n\n" + line.getContact(op.param2).displayName)
# ----------------- NOTIFED MEMBER JOIN GROUP
        if op.type == 55:
            try:
                if RfuCctv['cyduk'][op.param1]==True:
                    if op.param1 in RfuCctv['point']:
                        Name = line.getContact(op.param2).displayName
                        if Name in RfuCctv['sidermem'][op.param1]:
                            pass
                        else:
                            RfuCctv['sidermem'][op.param1] += "\n" + Name
                            pref=['‡πÅ‡∏≠‡∏ö‡∏ó‡∏°‡∏≤‡∏¢ ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡∏°‡∏≤ (ÔΩ°‚óï‚Äø‚óïÔΩ°)  ']
                            line.sendMessage(op.param1, str(random.choice(pref))+' '+Name)
                    else:
                        pass
                else:
                    pass
            except:
                pass

        if op.type == 55:
            try:
                if RfuCctv['cyduk'][op.param1]==True:
                    if op.param1 in RfuCctv['point']:
                        Name = line.getContact(op.param2).displayName
                        if Name in RfuCctv['sidermem'][op.param1]:
                            pass
                        else:
                            RfuCctv['sidermem'][op.param1] += "\n " + Name + "\n"
                            if " " in Name:
                            	nick = Name.split(' ')
                            if len(nick) == 2:
                            	line.sendMessage(op.param1, "Nah " +nick[0])
                            summon(op.param1, [op.param2])
                    else:
                        pass
                else:
                    pass
            except:
                pass
        if op.type == 55:
            print ("„Äê„Åï‡∏±‡¶èœÄ‡∏±‡Æû‚úµ‡∫ö‡∏¥‡§•‚Ñì‚Ñì“®‡§§Œ©„Äë")
            try:
                if op.param1 in read['readPoint']:
                    if op.param2 in read['readMember'][op.param1]:
                        pass
                    else:
                        read['readMember'][op.param1] += op.param2
                    read['ROM'][op.param1][op.param2] = op.param2
                    backupData()
                else:
                   pass
            except:
                pass
    except Exception as error:
        logError(error)
#============================================                
#==============================================================================#
while True:
    try:
        ops = oepoll.singleTrace(count=50)
        if ops is not None:
            for op in ops:
                lineBot(op)
                oepoll.setRevision(op.revision)
    except Exception as e:
        logError(e)
